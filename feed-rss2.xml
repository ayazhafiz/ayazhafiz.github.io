<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>Ayaz Hafiz's website.</description>		
		<link>https://ayazhafiz.com</link>
		<atom:link href="https://ayazhafiz.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>a simple language with flow typing</title>
				<description>&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The full source code for the language described here is available at
&lt;a href=&quot;https://github.com/ayazhafiz/lang_narrow&quot;&gt;gh:ayazhafiz/lang_narrow&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this cc, we will formulate &lt;a href=&quot;#lang_narrow&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;&lt;/a&gt;, a language that supports flow typing
with record and union types&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;union&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;union&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Union types are also known as sum types.&lt;/span&gt;. Flow
typing empowers our language’s type system to structurally narrow values’ types
at branches in a program’s control flow. To gain an intuition for what this means, let’s take a look at a
simple example:&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;ts&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;ts&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;If you are familiar with the TypeScript type system, our language’s semantics will feel very similar.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn defaultNat(): nat {
  1729
}

fn readNat(n: nat|string): nat {
  if n is nat
     then n             // n is nat
     else defaultNat()  // n is string
}

fn narrowBToNat(p: nat|{a: bool, b: nat}|{b: string, c: nat}): nat {
  if b in p
     then readNat(p.b)  // p is {a: bool, b: nat}|{b: string, c: nat}
     else p             // p is nat
}

// narrowBToNat(10) // =&amp;gt; 10
// narrowBToNat({a: true, b: 20}) // =&amp;gt; 20
// narrowBToNat({b: &quot;not a nat&quot; , c: 9}) // =&amp;gt; 1729
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The union type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T|U&lt;/code&gt; denotes a type that is either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt;, and the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; expressions introduce a condition that constrains a union type to
a subtype in either branch. Hopefully it’s easy to get an idea of what is
going; later, we’ll define the language and its constructs more formally.&lt;/p&gt;

&lt;p&gt;Even superficially, it is clear that our use of “union types” here is somewhat different from the
tagged union &lt;a href=&quot;https://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;algebraic data types&lt;/a&gt;
(ADTs) present in Haskell (via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;), OCaml (via
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;), or Rust (via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt;). Our union types are structural rather than
nominal, and the variants of our union types are types in of themselves, rather
than simply tag names (or constructors). However, they are still tagged unions
in the sense that the the variants of the union are named by their types. As
mentioned, we’ll give a proper definition our union types later on.&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Before we delve into formalizations, it may be helpful give some motivation for why we might want to
explore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;. After all, why not use ADTs in place of the kinds
of unions we have here, and why would flow typing be useful when
we can pattern match on data constructors? I will give two reasons, though
there may be more.&lt;/p&gt;

&lt;h3 id=&quot;the-merits-of-flow-typing&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-merits-of-flow-typing&quot;&gt;&lt;/a&gt;The merits of flow typing&lt;/h3&gt;

&lt;p&gt;In languages with ADTs, but without flow typing, we cannot employ the type system
to constrain the variants of an ADT based on invariants in a program control
flow. For example, consider some code like&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expensive_refresh_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expensive_validate_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RateLimited&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_recv_with_backoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timeout&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_recv_with_proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;unreachable!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a toy, but I hope it inspires a realistic situation. You have
some happy path you want to return from quickly, and a more expensive path to
go down otherwise. However, even though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Status::Ok&lt;/code&gt; is not a variant that could
constitute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resp.status&lt;/code&gt; in the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; expression, the type system doesn’t
know that; we have to inform it that this is so, somewhat unergonomically.&lt;/p&gt;

&lt;p&gt;With flow typing, the type system could remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Status::Ok&lt;/code&gt; from the possible
variants of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resp.status&lt;/code&gt; after the first branch.&lt;/p&gt;

&lt;h3 id=&quot;the-merits-of-our-union-types-compared-to-adts&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-merits-of-our-union-types-compared-to-adts&quot;&gt;&lt;/a&gt;The merits of our union types compared to ADTs&lt;/h3&gt;

&lt;p&gt;ADTs are closed. This means that whenever we add a new variant to an ADT, we
have to handle that variant everywhere the ADT is used.&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;adt-haskell&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;adt-haskell&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This is not entirely true in Haskell, as
Haskell permits partial functions. But supposing that we would like our
functions to be total, this holds.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* impl */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* impl */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I want to handle getting just the name for another animal, say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zebra&lt;/code&gt;, I
need to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zebra&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Animal&lt;/code&gt; ADT and handle the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zebra&lt;/code&gt; when
unpacking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Animal&lt;/code&gt; in both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSound&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getName&lt;/code&gt;. Of course, there are
ways around this: we could split up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Animal&lt;/code&gt; ADT into separate types to
be used for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSound&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getName&lt;/code&gt;, but then there is no easy way to
convert between the separate types without writing even more code (at least
if the ADTs are treated nominally, as they generally are).&lt;/p&gt;

&lt;p&gt;On the other hand, with union types this is easy:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn getSound(a: Cat|Dog|Zebra): string { /* impl */ }
fn getSound(a: Cat|Dog): string { /* impl */ }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the variants of the union are types in themselves, we can
include and exclude them freely. Furthermore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cat|Dog&lt;/code&gt; can be subsumed by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cat|Dog|Zebra&lt;/code&gt; immediately&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;subsumed-nominal&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;subsumed-nominal&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;As long as union types
are treated structurally, the subsumption would hold whether &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cat&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dog&lt;/code&gt; are treated nominally or structurally.&lt;/span&gt;;
we will formalize this subtyping relationship when developing the language in
the sections below.&lt;/p&gt;

&lt;h4 id=&quot;the-disadvantages-of-our-union-types-compared-to-adts&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-disadvantages-of-our-union-types-compared-to-adts&quot;&gt;&lt;/a&gt;The disadvantages of our union types compared to ADTs&lt;/h4&gt;

&lt;p&gt;I certainly don’t wish to claim life is greener on one side.
There are several disadvantages of using union types in the manner we will
develop in this language, including&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A lack of uniform tag names:&lt;/strong&gt; as we will see later, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; expression
requires that we attach to
every value used in such an expression a runtime type tag. This means
that the compiler must either employ some non-trivial machinery to determine all reachable
values to which it should attach type tags, or attach a
type tag to all runtime values. The cost of this work only increases with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt;
narrowing expression we introduce in &lt;a href=&quot;#lang-extends&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_extends&lt;/code&gt;&lt;/a&gt;, which
effectively requires a
typechecker in the program runtime. With ADTs, the costs associated with the
addition of type tags can be made
local and minimal – tags are constructed and read at syntax-directed sites, making it
obvious to a compiler where they should be inserted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive types are more difficult to formalize:&lt;/strong&gt; given that our type system is
structural rather than nominal, it is more difficult to typecheck recursive
type definitions&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;equi&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;equi&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;It actually wouldn’t be terrible with the
use of equirecursive types, but that’s beyond the scope of this cc.&lt;/span&gt;. To
keep things simple, our language has neither a notion of type variables nor
type inference, so there is no way to introduce recursive types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this is to say, if I were implementing flow typing in a production
language, I would likely use ADTs and perform narrowing on data constructors. But open unions
are easier to bookkeep than ADTs, so we prefer them for the purposes of our small
language. It should be pretty straightforward to translate our approach to
a language with closed, nominal ADTs.&lt;/p&gt;

&lt;h2 id=&quot;notation&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#notation&quot;&gt;&lt;/a&gt;Notation&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt;&lt;/span&gt; signifies a typing context, with some number of
variable-to-type bindings. For example, &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\Gamma =
\left\{\text{t}:\text{T}\right\}&lt;/script&gt;&lt;/span&gt; is a typing context wherein the variable
$\text{t}$ has type $\text{T}$.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\Gamma\vdash \text{t} : \text{T}&lt;/script&gt;&lt;/span&gt; means that under the context $\Gamma$, the expression $\text{t}$ has type $\text{T}$.
For example,&lt;/p&gt;
&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{align*}
\left\{ \text{a}: {\tt nat}, \text{id}: {\tt (nat): nat} \right\} \vdash \text{id}\left(\text{a}\right) : {\tt nat}
\end{align*}
&lt;/script&gt;&lt;/div&gt;
&lt;p&gt;is sound.&lt;/p&gt;

&lt;p&gt;A type derivation rule $\text{R}$ has the form &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\frac{\left[\text{condition}\right]*}{\text{result}}&lt;/script&gt;&lt;/span&gt;
and can be read as, “when the conditions of $\text{R}$ hold, the result holds.”
As an example, here is a derivation rule stipulating that the
addition of two expressions whose types under &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt;&lt;/span&gt; are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nat&lt;/code&gt;s
yields a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nat&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation*}
\frac{\Gamma\vdash \text{a}: \text{$\tt{nat}$} \quad \Gamma\vdash \text{b}: \tt{nat}}
{\Gamma\vdash \text{a} + \text{b} : \tt{nat}}
\end{equation*}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;$\text{S} &amp;lt;: \text{T} % &amp;gt;$ states that $\text{S}$ is a subtype of $\text{T}$.
$\require{cancel}\text{S} \cancel{&amp;lt;:} \text{T} % &amp;gt;$ states that $\text{S}$ is
not a subtype of $\text{T}$.&lt;/p&gt;

&lt;h2 id=&quot;lang_narrow&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#lang_narrow&quot;&gt;&lt;/a&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Having discussed some motivation and notation, we will now begin to formalize
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;. We will derive its type system, discuss what is needed to
provide for flow typing, and go over a runtime for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt; when compiled to C.&lt;/p&gt;

&lt;p&gt;Although we will present most of the interesting typing rules necessary to glue
the system together, I don’t attempt to cover all that would be
necessary to prove the correctness of this language’s type system&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;correctness&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;correctness&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;In fact, I am not sure the type system is sound and complete,
though “intuitively” it may be seen to be.&lt;/span&gt;.&lt;/p&gt;

&lt;h3 id=&quot;basic-types-and-their-rules&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#basic-types-and-their-rules&quot;&gt;&lt;/a&gt;Basic types and their rules&lt;/h3&gt;

&lt;p&gt;Our language contains the primitive types &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nat&lt;/code&gt; (a natural number), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unknown&lt;/code&gt; (the top type&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;top&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;top&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The top type is
inhabited by all values; it is the supertype of all types.&lt;/span&gt;), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt;
(the bottom type&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;bottom&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;bottom&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The bottom type is inhabited by no values; it is the
subtype of all types.&lt;/span&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt; supports functions and types them; for example,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn add(a: nat, b: nat): nat { /* impl */ }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;has the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(nat, nat): nat&lt;/code&gt;. However, this syntactic representation
of function types is not admitted by the &lt;a href=&quot;https://github.com/ayazhafiz/lang_narrow/blob/base/src/parser.mlyhttps://github.com/ayazhafiz/lang_narrow/blob/base/src/parser.mly&quot;&gt;language front-end&lt;/a&gt;;
that is, no value
can be explicitly typed as a function. Since all parameters must be typed by the user,
this restriction effectively means that there are no higher-order functions in
our language. Adding language support for higher-order functions would be
straightforward (support for type influencing less so&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;subtype-inference&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;subtype-inference&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Historically, type inference in the presence of subtypes has presented serious
implementation difficulties. In general, an efficient implementation of such
systems requires careful design of a language with syntax-directed typing rules.
For efficient implementations, see &lt;a href=&quot;https://hal.inria.fr/inria-00073205/document&quot;&gt;Pottier’s 1998 thesis&lt;/a&gt;
and &lt;a href=&quot;https://www.cs.tufts.edu/~nr/cs257/archive/stephen-dolan/thesis.pdf&quot;&gt;Dolan’s 2017 thesis&lt;/a&gt;. Dolan’s
thesis solves the even larger problem of type inference in the presence of subtyping and
polymorphism by treating types foremost as an algebra. A simpler, yet just-as-powerful version of Dolan’s work is
described in &lt;a href=&quot;https://lptk.github.io/files/[v1.8]%20simple-essence-algebraic-subtyping.pdf&quot;&gt;Parreaux 2020&lt;/a&gt;.
Thanks to Ben Siraphob for introducing me to the latter two publications.&lt;/span&gt;).&lt;/p&gt;

&lt;h4 id=&quot;record-types&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#record-types&quot;&gt;&lt;/a&gt;Record types&lt;/h4&gt;

&lt;p&gt;Our language supports records; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: 1, b: true}&lt;/code&gt; is a record with fields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, and has the type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: nat, b: bool}&lt;/code&gt;. Records can be projected by field name; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: 1, b: true}.b&lt;/code&gt;
yields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;. Here are the typing rules for record construction and
projection&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;record-union&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;record-union&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;After reading about &lt;a href=&quot;#union-types&quot;&gt;union types&lt;/a&gt;, you may notice that neither $\ref{Record-Proj}$ nor any other rule
permits the projection of a value of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: nat, b: nat}|{b: string}&lt;/code&gt; on the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;. As an exercise for you,
suppose we would like such a projection to yield the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nat|string&lt;/code&gt; (in fact, the full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt; type system does so). What
modifications to $\ref{Record-Proj}$ must be made to support this? (You can also
add additional rules, but doing so is not necessary).&lt;/span&gt;:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Record-Ctor}\tag{Record-Ctor}
\frac{\Gamma\vdash\text{t}_i:\text{T}_i \quad \forall i = 1, \dots, n}
{\Gamma\vdash \left\{\text{f}_1: \text{t}_1, \dots, \text{f}_n: \text{t}_n\right\}
:\left\{\text{f}_1: \text{T}_1, \dots, \text{f}_n: \text{T}_n\right\}}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Record-Proj}\tag{Record-Proj}
\frac{\Gamma\vdash\text{t}:\left\{\text{f}_1: \text{T}_1, \dots, \text{f}_n: \text{T}_n\right\}}
{\Gamma\vdash\text{t}.\text{f}_i:\text{T}_i \quad i=1, \dots, n}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;We also define a subtyping rule for records:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Subtype-Record}\tag{Subtype-Record}
\frac{
\begin{gather*}
\text{S}=\left\{ \text{f}_1: \text{S}_1, \dots, \text{f}_n: \text{S}_n \right\} \quad
\text{T}=\left\{ \text{g}_1: \text{T}_1, \dots, \text{g}_m: \text{T}_m \right\} \\
\forall i=1,\dots,m \;\; \exists j \text{ s.t. } \text{f}_j = \text{g}_i \text{ and } \text{S}_j &lt;: \text{T}_i % &gt;
\end{gather*}
}{\text{S} &lt;: \text{T}} % &gt;
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Notice that in the subtyping relation, the order of record fields does not
matter;
&lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt; \left\{\text{c}: {\tt nat}, \text{b}: {\tt nat}, \text{a}: {\tt nat}\right\} \lt: \left\{\text{a}: {\tt nat}, \text{b}: {\tt nat}\right\} &lt;/script&gt;&lt;/span&gt;
holds.&lt;/p&gt;

&lt;h4 id=&quot;union-types&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#union-types&quot;&gt;&lt;/a&gt;Union types&lt;/h4&gt;

&lt;p&gt;A union type (also known as a sum type) is a type that may be inhabited by
values of several different types. As an example, in our language union types
are written like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: bool}|nat|string&lt;/code&gt;, of which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: true}&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hi&quot;&lt;/code&gt;
are all valid inhabitants. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;, variants of a union type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt; are
subtypes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt; and are tagged by their type name.&lt;/p&gt;

&lt;p&gt;All values of a type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; are also of the singleton union type consisting of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;;
we make no distinction between these two notions. Unions types containing no
type variants are equivalent to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt; type; we make no distinction between
these two either.&lt;/p&gt;

&lt;p&gt;Notice that it is
impractical for us to deduce that a value of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; is of a union type that is a
strict supertype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; without explicit annotations. For example, it is only
sound to type the literal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nat&lt;/code&gt;, rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nat|string&lt;/code&gt; or any other
number of union types. However, we would also like to express the fact that a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nat&lt;/code&gt; fits in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nat|string&lt;/code&gt;; for example&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn id(a: nat|string): nat|string { a }
id(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should be well-typed. Thus, we have the following subtyping rule for unions:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Subtype-Union}\tag{Subtype-Union}
\frac{
\begin{gather*}
\text{S}=\text{S}_1 ~|~ \dots ~|~ \text{S}_n \quad
\text{T}=\text{T}_1 ~|~ \dots ~|~ \text{T}_m \\
\forall i=1,\dots,n \;\; \exists \text{T}_j \text{ s.t. } \text{S}_i &lt;: \text{T}_j
\end{gather*}
}{\text{S} &lt;: \text{T}} % &gt;
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;As with &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Subtype-Record}&lt;/script&gt;&lt;/span&gt;, the order of union variants does
not matter;
&lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;
\text{nat}|\text{string} \lt: \text{string}|\text{bool}|\text{nat}
&lt;/script&gt;&lt;/span&gt;
holds.&lt;/p&gt;

&lt;p&gt;There are also a few convenience rules we may want to introduce&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;convenience&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;convenience&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;There are more than the two we present here; for example we could also have an
“unfold” rule that makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string|(bool|nat)&lt;/code&gt; equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string|bool|nat&lt;/code&gt;.&lt;/span&gt;. For one,
notice that the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string|nat|string&lt;/code&gt; is equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string|nat&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Union-dup}\tag{Union-dup}
\frac{
\begin{gather*}
\text{T} = \text{T}_1 ~|~ \dots ~|~ \text{T}_i ~|~ \dots
~|~ \text{T}_{j-1} ~|~ \text{T}_j ~|~ \text{T}_{j+1}
~|~ \dots ~|~ \text{T}_n \\
\text{T}_i = \text{T}_j
\end{gather*}
}{
\text{T} = \text{T}_1 ~|~ \dots ~|~ \text{T}_i ~|~ \dots
~|~ \text{T}_{j-1} ~|~ \text{T}_{j+1} ~|~ \dots ~|~ \text{T}_n
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Furthermore, notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string|never&lt;/code&gt; is equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt; is
inhabited by no values and therefore contributes nothing to the domain of the
union type.&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Union-never}\tag{Union-never}
\frac{
\begin{gather*}
\text{T} = \text{T}_1 ~|~ \dots
~|~ \text{T}_{i-1} ~|~ \text{T}_i ~|~ \text{T}_{i+1}
~|~ \dots ~|~ \text{T}_n \\
\text{T}_i = \tt{never}
\end{gather*}
}{
\text{T} = \text{T}_1 ~|~ \dots
~|~ \text{T}_{i-1} ~|~ \text{T}_{i+1} ~|~ \dots ~|~ \text{T}_n
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-narrowed-type&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-narrowed-type&quot;&gt;&lt;/a&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; type&lt;/h3&gt;

&lt;p&gt;Next, let’s formalize the semantics of flow typing in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt; and discuss
what data structures we need to represent these semantics.&lt;/p&gt;

&lt;p&gt;As we saw in our initial example, the main idea of flow typing is to introduce a
condition at branch sites that narrows a value of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; to a type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt; in
one branch (let’s call this the left branch), and to the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; “without”
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt; in the other branch (let’s call this the right branch).
In our language, we only provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; expressions for branching, for which this
idea might look something like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// suppose Γ = {a: T}
if &amp;lt;some check to see if a is a U&amp;gt;
  then ... // a is a subtype of U in this branch
  else ... // a is a subtype of (T &quot;without&quot; U) in this branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll use a type constructor called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; to encapsulate the relationship
between an expression and its narrowed types in left and right branches. In the
example above, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;some check&amp;gt;&lt;/code&gt; condition would yield the type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed⟨a, U, T-U⟩&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T-U&lt;/code&gt; signifies a type inhabited by values that
inhabit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; but do not inhabit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt;&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;subtract&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;subtract&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This is one
interpretation of what we described as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; “without” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt; above, but there are many
others. We have to be careful though, because only a few interpretations can be
made sound :slightly_smiling_face:.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;We have two things to figure out regarding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;figure out how to construct them&lt;/li&gt;
  &lt;li&gt;figure out how they influence the types of branching expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s do the latter first.&lt;/p&gt;

&lt;h4 id=&quot;interaction-with-branching-expressions&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#interaction-with-branching-expressions&quot;&gt;&lt;/a&gt;Interaction with branching expressions&lt;/h4&gt;

&lt;p&gt;Take a look at the derivation rule for an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; expression with a boolean
condition:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{If-bool}\tag{If-bool}
\frac{
\begin{gather*}
\Gamma\vdash \text{c}:\text{bool} \\
\Gamma\vdash \text{left}:\text{T} \\
\Gamma\vdash \text{right}:\text{U}
\end{gather*}
}{
\Gamma\vdash \text{$\tt{if}$ c $\tt{then}$ left $\tt{else}$ right} :
\text{T} \vee \text{U}
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;For those unfamiliar, &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\text{T} \vee \text{U}&lt;/script&gt;&lt;/span&gt; is called the &lt;strong&gt;join&lt;/strong&gt; of $\text{T}$ and $\text{U}$,
and represents their least upper bound (or least common supertype). As a derivation
rule,&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Join}\tag{Join}
\frac{
\begin{gather*}
\text{T} &lt;: \text{J} \quad \text{U} &lt;: \text{J} \\ % &gt;
\forall \text{K} \text{ s.t. } \text{T} &lt;: \text{K}, \text{U} &lt;: \text{K} % &gt;
\implies \text{J} &lt;: \text{K} % &gt;
\end{gather*}
}{
\text{T} \vee \text{U} = \text{J}
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;The only modification we need to make for the derivation rule of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; with a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; condition is how the narrowed expression should be typed in the left
and right branches.&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\require{cancel}
\begin{equation}\label{If-narrowed}\tag{If-narrowed}
\frac{
\begin{gather*}
\text{t} : \text{T} \in \Gamma \\
\Gamma\vdash \text{c} : \text{Narrowed}\langle \text{t}, \text{U}, \text{W}\rangle \\
% TODO: why do i need this hack for never?
\text{U} \ne \text{$\tt{never}$} \ne \text{W} \\
\Gamma_{\bcancel{\text{t}}} = \Gamma \setminus \left\{\text{t : T}\right\} \\
\Gamma_{\bcancel{\text{t}}}, \text{t} : \text{U} \vdash \text{left} : \text{L} \\
\Gamma_{\bcancel{\text{t}}}, \text{t} : \text{W} \vdash \text{right} : \text{R}
\end{gather*}
}{
\Gamma\vdash \text{$\tt{if}$ c $\tt{then}$ left $\tt{else}$ right} :
\text{L} \vee \text{R}
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;First, we verify that the narrowed term &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; is in the typing context. If it
is not (for example, if it is a literal) the expression would not be
referenceable in either branch anyway; we assume this is a programming error.
Next, we validate that neither narrowed type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt;; if it were, the
branch associated with that narrowed type would never be taken, and hence the
branch is vacuous; we assume this also is a programming error.&lt;/p&gt;

&lt;p&gt;Then, we remove the binding for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; from
the typing context, determine the type of each branch with the addition of
the relevant narrowed type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; to its context, and yield the type of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; expression as the
join of both branches’ types. Notice that the context of the resulting type
contains the unnarrowed type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The restrictions we have imposed, namely that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; must be a variable
and that neither narrowed type can evaluate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt;, are not actually
necessary for the soundness of the derivation rule. However, their inclusion
helps catch programming mistakes, and the restriction against
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt;-narrowed branches effectively makes &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{If-narrowed}&lt;/script&gt;&lt;/span&gt;
applicable only when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; is a union type. This can simplify a typechecking
implementation significantly.&lt;/p&gt;

&lt;p&gt;And that’s all for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; types in branches. Now, onto how to construct
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; types!&lt;/p&gt;

&lt;h4 id=&quot;the-is-narrowing-expression&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-is-narrowing-expression&quot;&gt;&lt;/a&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; narrowing expression&lt;/h4&gt;

&lt;p&gt;In our language, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; expression constructs a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; type from an
expression and a subtype of the expression type. For example, the expression&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// suppose Γ = {a: string|nat|bool}
a is string|bool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;has the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed⟨a, string|bool, nat⟩&lt;/code&gt;. We define the derivation rule for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; expressions the following way:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Is}\tag{Is}
\frac{
\begin{gather*}
\text{W} = \text{T} - \text{U} \\
\end{gather*}
}{
\Gamma \vdash \text{t $\tt{is}$ T}: \text{Narrowed}\langle\text{t}, \text{U}, \text{W}\rangle
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;where the subtraction rule $\text{T} - \text{U}$ is given by&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Union-subtract}\tag{Union-subtract}
\frac{
\begin{gather*}
\text{T} = \text{T}_1 ~|~ \dots ~|~ \text{T}_n \\
\text{U} = \text{U}_1 ~|~ \dots ~|~ \text{U}_m \\
\text{W} = \text{W}_1 ~|~ \dots ~|~ \text{W}_p \\
\text{W } &lt;: \text{T} \\ % &gt;
\bbox[border: 1px solid grey]{
   \begin{gather*}
   \forall i=1,\dots,n \text{ s.t. } \forall j=1,\dots,m \\
   \text{T}_i \ne \text{U}_j \implies
   \exists \text{W}_k = \text{T}_i
   \end{gather*}
}
\end{gather*}
}{
\text{T} - \text{U} = \text{W}
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Notice that &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Union-subtract}&lt;/script&gt;&lt;/span&gt; elides from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; only those
types that equivalent to a variant of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt; (up to permutation of record
fields). For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: nat, b: bool} - {a: nat}&lt;/code&gt; yields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: nat, b: bool}&lt;/code&gt;,
not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the restrictions of &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Union-subtract}&lt;/script&gt;&lt;/span&gt; seem a bit limiting or unnecessary, we will discuss a
language that avoids them at the expense of greater runtime costs in &lt;a href=&quot;#lang_extends&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_extends&lt;/code&gt;&lt;/a&gt;.
However, I suspect these restrictions are reasonable for most general-purpose programming,
as it is always possible to refine a union type annotation with a type variant
that one may later want to narrow.&lt;/p&gt;

&lt;h4 id=&quot;the-in-narrowing-expression&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-in-narrowing-expression&quot;&gt;&lt;/a&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; narrowing expression&lt;/h4&gt;

&lt;p&gt;Consider the function&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn readBOrC(obj: {a: nat, b: nat}|{a: nat, c: nat}|{b: nat, d: nat}|{c: nat, d: nat}): nat {
  if obj is {a: nat, b: nat}|{b: nat, d: nat}
     then obj.b
     else obj.c
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works, but is a bit bulky; we don’t care that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj&lt;/code&gt; is a union of records
possibly containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;, we just care whether or not it’s a subtype of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{b: nat}&lt;/code&gt;. Because &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Union-subtract}&lt;/script&gt;&lt;/span&gt; excludes types by
equivalence rather than subtyping relation, if we were to try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj is {b: nat}&lt;/code&gt;,
the left narrowing type would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt;. So to elegantly handle narrowing of
records, we can reformulate &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Union-subtract}&lt;/script&gt;&lt;/span&gt; accordingly, as we do for &lt;a href=&quot;#lang_extends&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_extends&lt;/code&gt;&lt;/a&gt;, or introduce
a special case for records, as we will do here with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; expression.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; takes a field name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; and an expression of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;,
constructing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; instance with subtypes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; that are records containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; on the left
and all other subtypes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; on the right. For example,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// suppose: obj :: {a: nat, b: nat}|{a: nat, c: nat}|{b: nat, d: nat}|{c: nat, d: nat}
b in obj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;has the type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Narrowed⟨obj, {a: nat, b: nat}|{b: nat, d: nat}, {a: nat, c: nat}|{c: nat, d: nat}⟩
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We define the derivation rule for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; expressions the following way:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\require{bbox}

\begin{equation}\label{In}\tag{In}
\frac{
\begin{gather*}
\Gamma\vdash \text{t} : \text{T}_1 ~|~ \dots ~|~ \text{T}_n \\
\text{U} = \text{U}_1 ~|~ \dots ~|~ \text{U}_m \\
\text{U } &lt;: \text{T} \\ % &gt;
\bbox[border: 1px solid grey]{
   \begin{gather*}
   \forall i=1,\dots,n \text{ s.t. } \text{T}_i = \left\{\text{f}_1: \text{T}_{i1}, \dots, \text{f}_j : \text{T}_{ij} \right\} \\
   \text{and } \exists \text{f}_k = \text{f} \implies \exists \text{U}_l = \text{T}_i
   \end{gather*}
} \\
\text{W} = \text{T} - \text{U} \\
\end{gather*}
}{
\Gamma \vdash \text{f $\tt{in}$ t}: \text{Narrowed}\langle\text{t}, \text{U}, \text{W}\rangle
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Notice that the extraction of record types containing the field $\text{f}$ distributes over
the union type $\text{T}$, rather than operating on the type as a whole. This is
similar to the behavior of TypeScript’s &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types&quot;&gt;distributed conditional types&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-runtime-implementation&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#a-runtime-implementation&quot;&gt;&lt;/a&gt;A runtime implementation&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/ayazhafiz/lang_narrow/blob/base/src/typecheck.ml&quot;&gt;typechecking implementation&lt;/a&gt;
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt; is a pretty straightforward encoding of the presented
typing rules. What is more interesting is the implementation of expressions like
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; in the evaluation of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt; program, as these require auxiliary
type information.&lt;/p&gt;

&lt;p&gt;Actually, if the language is &lt;a href=&quot;https://github.com/ayazhafiz/lang_narrow/blob/base/src/eval.ml&quot;&gt;interpreted&lt;/a&gt;,
evaluating type-dependent expressions is straightforward – we reduce the expression-to-be-checked to a
value, invoke the typechecker, and get our result.&lt;/p&gt;

&lt;p&gt;But if the language is &lt;a href=&quot;https://github.com/ayazhafiz/lang_narrow/blob/base/src/codegenC.ml&quot;&gt;compiled&lt;/a&gt;,
we have a bit more work to do in encoding type tags and measuring type compatibility.
In the rest of this section, we will discuss this work for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;
programs compiled to C.&lt;/p&gt;

&lt;p&gt;A sufficiently advanced compiler could determine precisely which values are used
in expressions that read type tags, and attach tags only to those. For the ease of
implementation, we generate C code with all values having type tags.&lt;/p&gt;

&lt;p&gt;In our &lt;a href=&quot;https://github.com/ayazhafiz/lang_narrow/blob/base/src/codegenC.ml&quot;&gt;code generator&lt;/a&gt;,
we encode every value as an instance of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tagged_any&lt;/code&gt; struct.
The struct includes a type tag that discerns a value’s true type to
runtime functions, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt; field that contains the raw, type-safe value.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagged_any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagged_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tagged_any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagged_any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The most interesting runtime function using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tagged_any&lt;/code&gt;s is the pseudo-polymorphic
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt;:&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;print&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;print&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_print&lt;/code&gt; writes values without a newline, and is useful for recurring when
printing a record. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; is a user-facing entry point that terminates a printed
value with a newline.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagged_any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Runtime error: no matching tag %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagged_any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Having encoded all values as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tagged_any&lt;/code&gt;s, performing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; checks
becomes trivial. In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt;, we take an array of type tags
(constituting a union) and check if a value’s type tag is in that array. If we
need to check a record, we verify that all field names coincide and
recurse on checking corresponding field values. In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt;, if a value is not a record the check is
immediately false; otherwise, we walk the fields of the record and check if one
corresponds with the predicated field.&lt;/p&gt;

&lt;h3 id=&quot;performance-concerns-and-what-to-do-about-them&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#performance-concerns-and-what-to-do-about-them&quot;&gt;&lt;/a&gt;Performance concerns, and what to do about them&lt;/h3&gt;

&lt;p&gt;The introduction of type tags and runtime typecheckers introduces
costs that may not be immediately obvious to users of the language, and are
something that we would like to avoid. Type tags on their own aren’t
so bad to deal with; since they are constant, one can inline them and the
downstream C compiler will likely replace identical tags with a common
reference to a static; if not, an interner can be added without much difficulty.&lt;/p&gt;

&lt;p&gt;On the other hand, the costs incurred by evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; expressions are harder
to deal with, primarily because of the explosive cost of checking deeply nested
records for equivalence.&lt;/p&gt;

&lt;p&gt;To avoid this, perhaps the best strategy is to employ flow typing
in a language with nominal types, rather than the structural ones we have
presented in this language. This way, checks for type equivalence are simply the
comparison of two type names (or even better, two memory addresses).&lt;/p&gt;

&lt;h2 id=&quot;lang_extends&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#lang_extends&quot;&gt;&lt;/a&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_extends&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, it may appear that the restrictions imposed by &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Is}&lt;/script&gt;&lt;/span&gt; and &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{In}&lt;/script&gt;&lt;/span&gt;
are superfluous. In some sense they are; we can generalize over
both with a rule that constructs a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Narrowed&lt;/code&gt; type by testing against an
arbitrary subtype of a union.
Let’s direct such a rule with an expression called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Extends}\tag{Extends}
\frac{
\begin{gather*}
\Gamma\vdash \text{t} : \text{T} \\
\text{W} = \text{T} \setminus \text{U}
\end{gather*}
}{
\Gamma \vdash \text{t $\tt{extends}$ U}: \text{Narrowed}\langle\text{t}, \text{U}, \text{W}\rangle
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;We’ll define the exclusion &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\text{T}\setminus\text{U}&lt;/script&gt;&lt;/span&gt; the following
way:&lt;/p&gt;

&lt;div class=&quot;mathblock&quot;&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{equation}\label{Union-exclude-ST}\tag{Union-exclude-ST}
\frac{
\begin{gather*}
\text{T} = \text{T}_1 ~|~ \dots ~|~ \text{T}_n \\
\text{U} = \text{U}_1 ~|~ \dots ~|~ \text{U}_m \\
\text{U } &lt;: \text{T} \\ % &gt;
\text{W} = \text{W}_1 ~|~ \dots ~|~ \text{W}_p \\
\bbox[border: 1px solid grey]{
   \begin{gather*}
   \forall i=1,\dots,n \text{ s.t. } \forall j=1,\dots,m \\
   \text{T}_i \cancel{&lt;:} \text{U}_j \implies
   \exists \text{W}_k = \text{T}_i % &gt;
   \end{gather*}
}
\end{gather*}
}{
\text{T}\setminus\text{U} = \text{W}
}
\end{equation}
&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Now we can write the well-typed function&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn go(p: nat|bool|{a: nat, b: nat}|{b: nat, c: nat}): nat {
  if p extends {b: nat}
     then p.b
     else if p extends bool
          then if p then 1 else 0
          else p
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;using a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt; expression where we would have had to use a combination
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; expressions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;performance-concerns-and-what-to-do-about-them-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#performance-concerns-and-what-to-do-about-them-1&quot;&gt;&lt;/a&gt;Performance concerns, and what to do about them&lt;/h3&gt;

&lt;p&gt;Of course, the flexibility of &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Extends}&lt;/script&gt;&lt;/span&gt; does
not come without its costs. Like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_extends&lt;/code&gt; runtime needs
to check type tags and read record fields, but the conditions of &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Union-exclude-ST}&lt;/script&gt;&lt;/span&gt;
also suggests that the runtime needs to carry around a subtyping checker!&lt;/p&gt;

&lt;p&gt;Obviously, having both a compile-time and runtime subtyping checker is not ideal, and
the runtime penalties can be severe especially in the presence of large union,
record, or recursive types (if we had introduced them).&lt;/p&gt;

&lt;p&gt;There are several techniques to mitigate the runtime penalties; one approach may
be to populate, at compile time, a table of type relations amongst all known
types in the program, and perform subtyping queries by searching the table.
Costs of searches can be further reduced by storing the type relations in a tree
and making queries union-finds.&lt;/p&gt;

&lt;p&gt;My impression is that, in general, the power of a typing rule like &lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\ref{Extends}&lt;/script&gt;&lt;/span&gt;
is not worth the additional runtime complexity, cost, and code size its
implementation must introduce.&lt;/p&gt;

&lt;h2 id=&quot;going-further-an-algorithm-for-narrowed-contexts-in-imperative-programs&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#going-further-an-algorithm-for-narrowed-contexts-in-imperative-programs&quot;&gt;&lt;/a&gt;Going further: an algorithm for narrowed contexts in imperative programs&lt;/h2&gt;

&lt;p&gt;The implementation of typing contexts in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt; (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_extends&lt;/code&gt;) is
straightforward; since each program is one large
continuation, we never end up “jumping out” of the control flow (and the typing
context) we are currently in. Contrast this to an imperative version of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang_narrow&lt;/code&gt;, wherein we may write a program like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn is_number_like(p: bool|{numberish: nat|string}|nat|string): bool {
   if p is bool then {
      return false;
   }

   var n: nat|string = if numberish in p then { // (1)
      p.numberish
   } else {
      p
   };

   return if p is number then {
      true // (2)
   } else {
      String.regex_matches(RE_NUMBER, p) // (3)
   };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1)&lt;/code&gt; we would like the typing context to associate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p: {numberish: nat|string}|nat|string&lt;/code&gt;,
at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(2)&lt;/code&gt; associate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p: number&lt;/code&gt;, and at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(3)&lt;/code&gt; associate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p: string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It may not be obvious how to design an efficient algorithm to update
the typing context in a control flow with the presence of
jumps (like that of the first branch, which immediately returns). But
actually, it’s not so bad; I will give a quick sketch of a couple things
you may want to consider, and leave you to fill out the algorithm if you are
interested.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, define what it means for the typing context when the program hits a
local termination point (like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; statement, which jumps out of the local function);
one idea is to then mark everything in the local context as uninhabited.&lt;/li&gt;
  &lt;li&gt;Keep track of the typing context after the completion of each statement in the
program. For example, if a statement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; is of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if Cond then L else R&lt;/code&gt;,
and the typing contexts of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; as induced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cond&lt;/code&gt; are $\Gamma_{\tt L}$ and $\Gamma_{\tt R}$,
respectively, what are $\Gamma_{\text{post}({\tt L})}$ and $\Gamma_{\text{post}({\tt R})}$?
What is the the typing context $\Gamma_{\text{post}({\tt I})}$ in relation to $\Gamma_{\text{post}({\tt L})}$ and $\Gamma_{\text{post}({\tt R})}$?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this cc, we derived a simple language with support for structural type
narrowing of record and union types via flow typing. Our language and its type system are small
and intuitive enough to design and implement in an afternoon, but additional
work not presented here is needed to formulate soundness and completeness of the
type system.&lt;/p&gt;

&lt;p&gt;To learn more about flow typing, you may be interested in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flow-sensitive_typing&quot;&gt;Wikipedia entry&lt;/a&gt; and
&lt;a href=&quot;https://ecs.wgtn.ac.nz/foswiki/pub/Main/TechnicalReportSeries/ECSTR12-20.pdf&quot;&gt;Pearce’s 2012 paper&lt;/a&gt; on
a flow calculus with proofs of correctness.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading. I hope you had fun, and that this cc inspires
you to design more interesting type systems.&lt;/p&gt;
</description>
				<pubDate>Thu, 21 Jan 2021 02:00:00 -0600</pubDate>
				<link>https://ayazhafiz.com/articles/21/lang-narrow</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/21/lang-narrow</guid>
			</item>
		
			<item>
				<title>the commodification of masculinity in hip-hop</title>
				<description>&lt;p&gt;In this cc, my goal is to impress upon you the use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Hegemonic_masculinity#Hybrid_masculinity&quot;&gt;hybrid masculinities&lt;/a&gt;
in modern hip-hop as a commercial tool, attracting audiences but not
representing them in a meaningful way. I claim that the use of masculinities as
artistic motifs creates greater and more intersectional
inequalities between the hip-hop elite and their non-normative
audiences.&lt;/p&gt;

&lt;p&gt;A quick note – this is not meant to be an instance of “cancel culture” or
anything like that. I just think that an account of this phenomenon is quite
interesting. On the other hand, this is a rather opinionated argument. If you
don’t agree with me, that’s cool!&lt;/p&gt;

&lt;h2 id=&quot;sexuality-as-a-musical-riff&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#sexuality-as-a-musical-riff&quot;&gt;&lt;/a&gt;Sexuality as a Musical Riff&lt;/h2&gt;

&lt;p&gt;Today’s male hip-hop artists sing not only about their conquests and
infatuations with women, but also those with men, both women and men, and
sometimes neither women nor men. The most visible example lies with Frank
Ocean, whose 2012 &lt;a href=&quot;https://en.wikipedia.org/wiki/Channel_Orange&quot;&gt;channel ORANGE&lt;/a&gt;
is considered to be Frank’s first public expression of his bisexuality. The day he released
the album, Frank posted a &lt;a href=&quot;https://frankocean.tumblr.com/image/26473798723&quot;&gt;note on Tumblr&lt;/a&gt;,
sharing that his first love was with a man.&lt;/p&gt;

&lt;p&gt;The same day, Tyler the Creator tweeted out two replies to Ocean’s announcements&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;Tyler-tweets&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;Tyler-tweets&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Looks like the tweets have been removed from Twitter,
but &lt;a href=&quot;https://www.vibe.com/2012/07/frank-ocean-comes-out-bisexual-tyler-the-creator-reacts&quot;&gt;records of them&lt;/a&gt;
are still around. I’ve censored some parts I’m not interested in presenting on
this blog.&lt;/span&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fucking Finally Sus Boy @frank_ocean Hahahaha, You Still Aint Got No Bitches Hahaha … Dawg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;My Big Brother Finally Fucking Did That. Proud Of [Ocean] Cause I Know That Shit Is Difficult Or Whatever. Anyway. Im A Toilet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember that Tyler and Frank are in the same collective (Odd Future), and by
all accounts good friends. But at least to Tyler, Frank’s account of his
sexuality is as much of a joke as Tyler’s assertion that he is “a toilet”.&lt;/p&gt;

&lt;p&gt;While these are just Tyler’s comments, I claim that the hip-hop artists in
general are not interested in dialogue about sexual diversity outside of
whatever they write in their songs. Even Frank Ocean now rejects
“the label as a queer artist, or even as bisexual,” claiming, he is “in
this business to be creative”. Theomatic states that the role of diverse
masculinities in hip-hop is artistic and power-building for rappers, conceding
that empowerment of sexually diverse masculinities in general would require much
larger work outside the hip-hop scene.&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;ocean-theomatic-statements&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;ocean-theomatic-statements&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;http://www.garfieldmessenger.org/4123/articles/features/masculinity-in-hip-hop-taking-the-mask-off&quot;&gt;Source&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Though expressions of diverse sexual experiences are novel in hip-hop, there is no
indication they are meant to break down normative discrimination of sexuality
diversity or empower LGBTQ+ communities. I mean, even Frank Ocean says that
he’s really not singing about this for any purpose other than that of his art.
And though there is nothing wrong with that sentiment, Ocean’s individual choice
manifests itself much more widely in the artistic realm as a prescription for
the use of marginalized masculinities as an aesthetic to attract marginalized
communities. This tactic grows an artist’s audience, enriches their personal
wealth, and empowers their actions, while not really giving anything back to
their audience other than a shallow sense of solidarity.
It’s like a very subtle, almost imperceptible kind of queerbaiting.&lt;/p&gt;

&lt;p&gt;Similar behavior &lt;a href=&quot;https://journals.sagepub.com/doi/10.1177/0891243213503901&quot;&gt;was studied&lt;/a&gt;
by Tristan Bridges, who saw straight men construct hybrid masculinities in an
effort to appeal to marginalized groups but ultimately produced further
inequalities between dominant and divergent masculinities. And even though Frank
Ocean and others in the hip-hop scene may not be straight, the intention and
consequences of their actions are no different.&lt;/p&gt;

&lt;h2 id=&quot;sometime-you-can-have-your-cake-and-eat-it-too&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#sometime-you-can-have-your-cake-and-eat-it-too&quot;&gt;&lt;/a&gt;Sometime you can have your cake and eat it too&lt;/h2&gt;

&lt;p&gt;Aside expressions of sexual diversity, some displays seeming to empower diverse
masculinities in hip-hop are structured in a
way as to be contradictory and even reinforce the dominance of hegemonic
masculine norms. We’ll get to what this looks like in a second; first, some
history.&lt;/p&gt;

&lt;p&gt;I claim that the
nature of this juxtaposition dates back to early hip-hop, when artists developed
a simultaneous mandate to display an “authentic individual” and to display
hypermasculinity reflecting Black Power movements. This &lt;a href=&quot;https://openjournals.library.sydney.edu.au/index.php/SCM/article/view/8514&quot;&gt;was studied&lt;/a&gt;
by Megan Morris, who argues
the former attribute bound hip-hop culture to the ideals of black communities,
while the latter attribute sought to rebuff white hegemony over black
populations and enrich the influence of black masculinities in popular culture.&lt;/p&gt;

&lt;p&gt;Modern rappers have inherited the mold of this
mandate; in &lt;a href=&quot;https://genius.com/Tyler-the-creator-yonkers-lyrics&quot;&gt;Yonkers&lt;/a&gt;, Tyler questions whether his father would
have cared for him and speaks about working with his therapist, but not without
also admonishing “Jesus” for opening up about his problems and threatening
B.o.B. while calling him a “faggot”. In &lt;a href=&quot;https://genius.com/Drake-finesse-lyrics&quot;&gt;Finesse&lt;/a&gt;,
Drake speaks to his insecurity of not always being by the side of the person he loves and his
inexperience with romantic commitment, but also mentions flying to New York to
attend Fashion Week on a whim.&lt;/p&gt;

&lt;p&gt;In their &lt;a href=&quot;https://spectrum.library.concordia.ca/985160/1/Dei-Sharpe_MA_S2019.pdf&quot;&gt;2019 thesis&lt;/a&gt;,
Jamilah Dei-Sharpe coined expressions of vulnerability as instances of a
“Intimate Masculinity” prevalent in modern hip-hop. And while both Tyler and
Drake display intimate masculinities, they predicate their depictions on
aggressive assertions of normative masculinity like violence, homophobia, and wealth.
This severely diminishes the value of intimate masculinities on their own, and only
reinforces the dominance of heteronormative masculinities in the hip-hop arena.
Tyler’s words on the second verse of Yonkers are the most striking –
he implies that displays of male
vulnerability are either accompanied by admonishing the vulnerabilities of other
men or else are hidden from the surface of masculinity entirely. Neither of
these representations differ from the “hardened and strong” masculinity in their
representation of male vulnerability.&lt;/p&gt;

&lt;p&gt;All this is culminates in the perception that intimate masculinities are
untenable and invaluable without accompaniment by traits of normative
masculinities. Of course, this serves only to
marginalize highly intersectional masculinities who are far from the hegemony
and being increasingly swindled by faux-authentic songs.&lt;/p&gt;

&lt;p&gt;In the end, Tyler and Drake have had their cake, and eaten it too.&lt;/p&gt;

&lt;h2 id=&quot;will-you-leave-me-behind&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#will-you-leave-me-behind&quot;&gt;&lt;/a&gt;Will you leave me behind?&lt;/h2&gt;

&lt;p&gt;The final point I want to make is that the growth of power by hip-hop artists
often collects on that which has been hidden behind barriers
constructed by white, heteronormative populations. But rather than reclaiming
this power and redistributing it to larger communities, 
these artists stay near the hegemonic status-quo.&lt;/p&gt;

&lt;p&gt;This too has been seen before. The most relevant instance dates back early days
of hip-hop, when black and Chicano rappers &lt;a href=&quot;https://www.jstor.org/stable/23884882?seq=1&quot;&gt;rejected traits&lt;/a&gt; of
white hegemony only insofar as destruction of these traits awarded them power in
communities and refuted their individual subjugation under white hegemony; that
is, these rappers continued to observe other traits of white-normative
masculinities so as to hold power over their communities.&lt;/p&gt;

&lt;p&gt;Today, the construction of power by hip-hop elite has generated an
increasingly-complex landscape of inequalities between masculinities; the hybrid
masculinities presented by dominant artists differs vastly from the marginalized,
intersectional masculinities they claim to represent, and it remains
unconditional that these hybrid masculinities are invaluable unless represented
at the top of hip-hop cultural hierarchy.&lt;/p&gt;
</description>
				<pubDate>Wed, 20 Jan 2021 02:00:00 -0600</pubDate>
				<link>https://ayazhafiz.com/articles/21/hiphop-masuclinity</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/21/hiphop-masuclinity</guid>
			</item>
		
			<item>
				<title>Hot Code Reloading, with libc or in the browser</title>
				<description>&lt;blockquote&gt;
  &lt;p&gt;The full source code for the framework described here is available at
&lt;a href=&quot;https://github.com/ayazhafiz/hotreload&quot;&gt;gh:ayazhafiz/hotreload&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this cc, we will develop a small framework for executing software programs
with support for &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_software_updating&quot;&gt;hot code reloading&lt;/a&gt;.
Hot code reloading permits dynamic (“hot”) changes to part of a program’s implementation
without interfering with the active state of the program or requiring a full recompilation,
permitting faster iteration cycles during software development. As a small
example, here is our framework hot-reloading parts of a
simple counter program without changing its state:&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;https://github.com/ayazhafiz/hotreload/blob/base/examples/demo_native.gif?raw=true&quot; /&gt;&lt;figcaption&gt;Demo of hot code reloading for a simple counter program with the native backend&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://github.com/ayazhafiz/hotreload/blob/base/examples/demo_browser.gif?raw=true&quot; /&gt;&lt;figcaption&gt;Demo of hot code reloading for a simple counter program with the browser backend&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is not just live code reloading. When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt; are reloaded,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; is not affected.&lt;/p&gt;

&lt;p&gt;To show how we could implement hot code reloading for both machine-code programs
and those running in a browser (both of which are shown in the examples above), we will
implement two backends. One will compile
our software to machine code and execute it in a
two-sided runtime; this is called the native backend. The other will compile our software to JavaScript code and
execute it in the browser with a client/server runtime; this is the browser
backend.&lt;/p&gt;

&lt;p&gt;But first, it will be helpful to mention the framework language, which has been
designed to provide a common frontend for both runtimes.&lt;/p&gt;

&lt;h2 id=&quot;the-framework-language&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-framework-language&quot;&gt;&lt;/a&gt;The framework language&lt;/h2&gt;

&lt;p&gt;Here’s the source code of the counter example we saw above&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;program&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;program&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;The code shown in the example above is actually an earlier version of
the framework language, but the presented code works all the same.&lt;/span&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hotreload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HotReloadProgram&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;../runtime/runtime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HotReloadProgram&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;hotreload&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;hotreload&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just TypeScript code, which is checked by the TypeScript compiler and
then translated to either C++ (for the native backend) or JavaScript (for the
browser backend).&lt;/p&gt;

&lt;p&gt;Each program is described by a single class that extends from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HotReloadProgram&lt;/code&gt;; the entry point is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; method of that class. Some
standard functions (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sleep_seconds&lt;/code&gt;) are provided by the base class.
The most important thing here is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; decorator, which marks
methods whose implementations should be watched and reloaded as needed by the
runtime.&lt;/p&gt;

&lt;p&gt;When targeting the browser runtime, the input program can contain any code
admissible by the TypeScript compiler. When targeting the native backend,
only a subset of TypeScript code is admissible, as I would like this to be an
exploration of hot-code reloading rather than that of TS-&amp;gt;C++
code generation. Adding support for translation of more constructs should be
trivial, but the language really isn’t the point here.&lt;/p&gt;

&lt;p&gt;Our choice of TypeScript as a high-level DSL works well
because it is trivial to translate to both target languages, and all we need is
something that we can input into either backend to check if our hot-reloading
implementation “just works”. We could talk more about programming language interfaces
if we were implementing some production system based on this work. In fact, I am
of the opinion that it should be
programming language compilers/interpreters that provide support for hot code
reloading, not external frameworks.&lt;/p&gt;

&lt;p&gt;But okay, I digress. Let’s get on with what we’re really here for – hot code
reloading! First up, the native backend and runtime.&lt;/p&gt;

&lt;h2 id=&quot;the-native-backend&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-native-backend&quot;&gt;&lt;/a&gt;The native backend&lt;/h2&gt;

&lt;p&gt;So let’s say we have some program that we know how to compile to machine code,
load, and execute. What extra work do we need to do to support hot code reloading
within the executable?&lt;/p&gt;

&lt;p&gt;The main thing to figure out is how the executable be composed. It’s clear that in order
to change the implementation of a function on the fly without changing the state
of a running binary, we cannot statically link the function routine with that
binary; otherwise, we would need to re-link (and thus restart) the entire
binary when the function changes. So we need to be able to dynamically load, link, and unload the function
symbol as needed. And that’s just it – we’ll compile our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt;-annotated
functions as dynamic libraries (also known as shared libraries) and give our main program
executable some information on how to load and link those libraries. Then, when
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; function implementation changes, we recompile its dynamic
library and instruct the main program to reload and re-link the library.&lt;/p&gt;

&lt;p&gt;To me, there is nothing really tricky or even interesting about this idea; it just
makes sense! Turns out, shared libraries are how pretty much all plugin systems
works, and thankfully &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc&lt;/code&gt; has a series of functions devoted
to loading/unloading/reading from dynamic libraries (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man 6 dlopen&lt;/code&gt;). So
knowing the path forward, the remaining work we have is to actually set up
the runtime in the aforementioned manner.&lt;/p&gt;

&lt;p&gt;First, let’s design a system to load and link dynamic libraries associated with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; functions in the user program (we’ll call this the program runtime).
For each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; function, we’ll have the framework compiler instantiate a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HotReload&lt;/code&gt; object to manage this work. Let’s walk through what that
object looks like&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;c&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;c&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;By the way, I use C++ as the target language
here to make some things like memory allocation easier than would be in C, where
a lot of boilerplate may distract from the more interesting things. Writing this
same runtime in C would be straightforward.&lt;/span&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HotReload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...snipped constructor&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assure_loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only public API of the object is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; method, which retrieves the
function pointer associated with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; function. The signature of the
function is described by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;, which we instantiate with a concrete type during
compilation of the input program to C++ (we’ll see what that looks like in a bit).&lt;/p&gt;

&lt;p&gt;Before we get to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assure_loaded&lt;/code&gt;, let’s take a look at the data we associate
with each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HotReload&lt;/code&gt; instance.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HotReload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...snipped&lt;/span&gt;

 &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copypath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loaded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;time_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are comments in the &lt;a href=&quot;https://github.com/ayazhafiz/hotreload/blob/base/runtime/runtime.cpp&quot;&gt;source code&lt;/a&gt;
describing what each of these members does, but for exposition let’s enumerate
them here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api&lt;/code&gt;: the name of the function symbol to be loaded from the
shared library containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; function implementation.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt;: the file path of the dynamic library the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; function
routine is defined in. When the function implementation changes, it is
recompiled with output at this path.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copypath&lt;/code&gt;: consider the case in which we go to access a function routine
while a new implementation is being recompiled to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt;. If the
compilation process touches the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt; non-atomically (which it almost certainly does), we would have
to spin until the compilation is finished. To avoid this,
whenever we detect a change to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt; we first copy its contents to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copypath&lt;/code&gt; and then read the function routine from there. This way, the
user program can continue to use a stale function implementation while the
library at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt; is recompiling.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lockfile&lt;/code&gt;: in general we want to reload the function symbol for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api&lt;/code&gt;
whenever we detect a change to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt;, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt; may be modified
non-atomically during the compilation process, in which case the library contents may be incomplete and non-loadable.
To deal with this problem, we check for the
presence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lockfile&lt;/code&gt;, which exists on the file system when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt; is
being written to and is removed once its contents are complete.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle&lt;/code&gt;: an opaque handle to the associated dynamic library provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlopen&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loaded&lt;/code&gt;: a pointer to the function symbol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api&lt;/code&gt; represents.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadtime&lt;/code&gt;: the last time we loaded and linked the dynamic library. If the
library object file is modified after this time, we know we should reload it
again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe you already see how the loading of symbols is going to work:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HotReload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...snipped&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...snipped&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assure_loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_mtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lockfile_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dlclose failed: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;copy_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copypath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copypath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTLD_NOW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTLD_LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dlopen failed: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;loadtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_mtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// clear errors&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;loaded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dlsym failed: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt; has been modified since we last used the function
symbol associated with it. If it has and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lockfile&lt;/code&gt; associated with active
compilation is not present, we proceed with reloading the function symbol.
We close our active handle to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copypath&lt;/code&gt; (remember, this is where we actually
read the symbols from, since a handle to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt; would already be
invalidated at this point). Then we copy the shared library to our target
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copypath&lt;/code&gt; site. We call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlopen&lt;/code&gt; on the shared library which loads and links
it, and store the returned library handle in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle&lt;/code&gt;. Finally, we grab the actual function
routine we’re looking for by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlsym&lt;/code&gt; with the handle and the
function name.&lt;/p&gt;

&lt;p&gt;You may be wondering, why is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle&lt;/code&gt; a data member if its state does not
need to persist between multiple calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assure_loaded&lt;/code&gt;? The reason is that the destructor of
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HotReload&lt;/code&gt; instance should also call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlclose&lt;/code&gt; on the shared library handle,
because handles to shared libraries are reference counted (when there are no
references, the library is unloaded). Of course, since the lifetime of a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HotReload&lt;/code&gt; instance is exactly that of the user program it’s not like we
can introduce memory leaks this way, but hey.&lt;/p&gt;

&lt;p&gt;Another thing to mention is the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTLD_NOW&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTLD_LOCAL&lt;/code&gt; flags
in the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlopen&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTLD_NOW&lt;/code&gt; instructs libc to bind all external symbols
in the library immediately rather than lazily on usage. Since for us, each
shared library contains only one function routine which is about to be used,
there’s not much point to delaying symbol resolution. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTLD_LOCAL&lt;/code&gt; means
that symbols in the library are accessible only by the handle returned from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlopen&lt;/code&gt;, which is clearly what we want.&lt;/p&gt;

&lt;p&gt;Note that our approach here is lazy in the sense that we cache the function
symbol address from the shared library and try to reload the library only when a call
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HotReload#get&lt;/code&gt; is made. The expectation is that the cost of
file copying/loading/linking is amortized across many calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;, thus
keeping the performance and behavior of the program similar to what it would be
without a hot reload runtime. It also avoids a bunch of complexity we might have
introduced through background threads listening to file changes or spinning in
place of a lockfile.&lt;/p&gt;

&lt;p&gt;Now, let’s take at what the counter program we showed earlier looks like when
compiled with this runtime.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// /private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/7f828395e1611cb8b3e64ee8c7536f35.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// /private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/2872612167e7943ceea64b36d17c89d4.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// /private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/fc2d242f0363b851a0b2efd6b9db7df8.cpp&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* &amp;lt;runtime snipped&amp;gt; */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HotReload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/40d1e496db6a6655b65c5d73458b6373&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/2d8885948a7d8c9abf321e4f3f6912c1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/ef5a9921ce0030c42054ec3fb658b3ad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HotReload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shift&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/fad7d0510a897b50c8f8aec4efc8155e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/d02eecf94ddeb3592470ff6959fdcaba&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/private/var/folders/_j/4xdvs8jj5qd6nsfk8wf6jy900000gn/T/f3176b0204c187f47b4d0f1cef1a5e37&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sleep_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty straightforward – for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt;-annotated function (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt;) the framework runtime allocates some unique, temporary files for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copypath&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lockfile&lt;/code&gt;, and an implementation file to house the function source code. Then the
framework writes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; function implementations to their implementation files, compiles those
files as shared libraries at their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpath&lt;/code&gt;s, and generates
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HotReload&lt;/code&gt; instances referencing those functions, type-parameterized by their
function signatures, in the main program. Finally, we rewrite the raw calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; to
be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift.get()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale.get()&lt;/code&gt;. If you’re wondering why we label the
definitions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extern &quot;C&quot;&lt;/code&gt;, it’s to ensure conformance
with the C ABI as expected by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlsym&lt;/code&gt; (otherwise a C++ compiler may mangle the names).&lt;/p&gt;

&lt;p&gt;The presence of an additional &lt;a href=&quot;https://github.com/ayazhafiz/hotreload/blob/base/src/runtime_native.ts&quot;&gt;runtime on the framework side&lt;/a&gt;
is why I refer to the native backend as having a two-sided runtime. As well as
compiling and executing the resulting C++ code, the framework runtime is
responsible for listening to changes in the input program and
recompiling the shared libraries associated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; functions as
needed.&lt;/p&gt;

&lt;p&gt;And that’s all there is to it! We’ve implemented a DSL and framework for running
programs with no formal dependencies other than that of libc, and in very little
time. Get rid of the DSL, and the runtime alone can be modified to fit any
project that doesn’t mind a dependency on libc.&lt;/p&gt;

&lt;p&gt;Our fun isn’t over yet – now, let’s show how to perform hot code reloading with
programs in the browser, where program state is abound and there certainly is no
libc, let alone the concept of machine code loading and linking.&lt;/p&gt;

&lt;h2 id=&quot;the-browser-backend&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#the-browser-backend&quot;&gt;&lt;/a&gt;The browser backend&lt;/h2&gt;

&lt;p&gt;Obviously, the approach we described above cannot be readily translated to the
execution of JavaScript programs by JavaScript engines in the browser. But
thanks to the dynamic nature of JavaScript, changing implementations arbitrarily
during a program’s execution is startlingly easy. The key idea is that we can
inject arbitrary JavaScript code via fresh &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements inserted in the
DOM, which will immediately execute any code they contain.&lt;/p&gt;

&lt;p&gt;In general this is kind of arbitrary code injection is a great way to introduce security vulnerabilities, but since we expect hot
code reloading to be used only in local development environments, we’ll wave our
hands at that and instead accept it as a huge boon to the ease of our
implementation.&lt;/p&gt;

&lt;p&gt;Since our program is defined entirely in a class, and hot-reloadable functions
are just methods on that class, we can apply new changes just by changing the
definition of the method on an instance of the class. And in JavaScript, class
methods are just properties. For example:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- some html --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// the counter example above&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// execute the program&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element executes in the same context as the first, so it
overwrites the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; method of the program with an implementation that scales
the input variable by 2 rather than 1. Calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;program.scale&lt;/code&gt; will immediately begin referencing
this implementation&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;bind&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;bind&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;For those unfamiliar, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn.bind(obj)&lt;/code&gt; updates
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; reference in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt; to be that of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj&lt;/code&gt;. By default, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;
reference in a free function is just that function. Of course, in this example
it doesn’t matter because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; does not use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Knowing how to apply changes, the other thing we need to figure out is how to
inform the running program of new changes. Since we have no file system access
from the browser, it seems we need a web server. And that’s exactly what
we’ll do – the framework runtime will spin up a web server (we’ll call this the
server runtime) that serves a web page with the user program and a runtime for
applying changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; methods of the active program (we’ll call this
the client runtime). The client runtime will open a websocket with the server
runtime, over which the server will send code patches (of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;program.foo = newFoo.bind(program)&lt;/code&gt; we saw above) to the client whenever it detects changes
to the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hotreload&lt;/code&gt; methods in the input program.&lt;/p&gt;

&lt;p&gt;Let’s quickly walk through the &lt;a href=&quot;https://github.com/ayazhafiz/hotreload/blob/base/runtime/runtime.html&quot;&gt;client runtime&lt;/a&gt;
to make sure we’re on the same page&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;server-runtime&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;server-runtime&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The &lt;a href=&quot;https://github.com/ayazhafiz/hotreload/blob/base/src/runtime_browser.ts&quot;&gt;server runtime&lt;/a&gt;
is not that interesting, but I have attempted to leave it well-commented if you
are interesting in reading through it.&lt;/span&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_π_reload_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_π_resolve_reload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;πhotreload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reload_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_π_reload_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wait_hotreload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;_π_resolve_reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`_π_resolve_reload[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]();`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wait_hotreload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;πrecv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;πHR_ROUTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;πrecv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;πhotreload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we receive a message over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;πrecv&lt;/code&gt; websocket, we assume that the message
is a well-formed and complete patch to the class instance containing the main
program (the patch is &lt;a href=&quot;https://github.com/ayazhafiz/hotreload/blob/08bff15d21d4786da4a79a4ad371f0d9072cb62d/src/compile.ts#L134-L184&quot;&gt;assembled in the compiler&lt;/a&gt;). We chuck the patch over to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;πhotreload&lt;/code&gt;,
which will actually load it in the active session. First, we allocate a
new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element to hold the patch. It’s
polite to clean up after yourself, we also allocate a fresh &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; that will
be resolved by code in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element after the patch has been
evaluated. We inject the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element into the DOM, await the promise, and
then remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;It’s that easy! Now we can go to work on web applications without the annoyance
of a full recompilation, refresh, and re-navigation to the state we were at every time
we want to make a change.&lt;/p&gt;

&lt;h3 id=&quot;appendix-hot-module-reloading&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#appendix-hot-module-reloading&quot;&gt;&lt;/a&gt;Appendix: Hot Module Reloading&lt;/h3&gt;

&lt;p&gt;Most modern JavaScript bundlers employ a hot code reloading technique called
“hot module reloading” that is more general, but less granular than the
per-function hot reloading we have presented here.&lt;/p&gt;

&lt;p&gt;Hot module reloading reloads entire modules (i.e. on the granularity of files)
when they are changed. This provides for an even simpler runtime implementation
than that presented here, since you can just load up a static file from the
runtime server whenever something changes. It also doesn’t tie you down to the
opinionated and somewhat contrived framework language we used here; all you need
is a project that is relatively well-modularized. Of course, the downside
is that the time and resources associated with recompilation/reloading will now
be proportional to the number of modules in your project.&lt;/p&gt;

&lt;p&gt;Anyway, hope this has been fun. I doubt this is something most of us will need
to think about, let alone implement, on a frequent basis, but it doesn’t hurt to
know how to do it – especially when it’s so easy, and looks so nice!&lt;/p&gt;
</description>
				<pubDate>Thu, 07 Jan 2021 02:00:00 -0600</pubDate>
				<link>https://ayazhafiz.com/articles/21/hot-code-reloading</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/21/hot-code-reloading</guid>
			</item>
		
			<item>
				<title>pattern matching with a typechecker</title>
				<description>&lt;p&gt;I’ve been doing the 2015 Advent of Code puzzles, and today I came across &lt;a href=&quot;https://adventofcode.com/2015/day/16&quot;&gt;Day 16 - Aunt Sue&lt;/a&gt;.
The premise of the problem is you have a bunch of aunts named Sue, each of which
you know some facts about, and you are searching for the aunt that matches a
set of predetermined facts. The second part of the problem adds additional
constraints that make the fact matching conditional rather than singleton.&lt;/p&gt;

&lt;p&gt;This is a pretty simple pattern matching problem. While I was thinking about
about it, I realized that it could be solved entirely within TypeScript’s type
system!&lt;/p&gt;

&lt;p&gt;In this cc, we will cover how to do so - part 1 is pretty
straightforward, part 2 requires some construction and is more
interesting. The article will not attempt to assume you are previously familiar
with TypeScript’s type system, introducing semantics where needed. Understanding
of subtyping is assumed.&lt;/p&gt;

&lt;p&gt;The basis for this construction is TypeScript’s treatment of
primitive literals as subtypes of their primitive type (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 &amp;lt;: number&lt;/code&gt;), a
feature I am not aware any other mainstream programming languages have&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;number&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;number&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This feature is not strictly needed (i.e. you could form a
similar construction in other languages by creating fresh types for the natural
numbers), but it makes application of the approach much easier.&lt;/span&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prelude&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#prelude&quot;&gt;&lt;/a&gt;Prelude&lt;/h3&gt;

&lt;p&gt;As a quick note on notation, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S &amp;lt;: T&lt;/code&gt; to mean &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt;
is a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S &amp;lt;/: T&lt;/code&gt; to mean &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt; is not a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;TypeScript union types are of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T|U&lt;/code&gt; and are inhabited by values that
have type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt;. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number|string&lt;/code&gt; is inhabited by all string
and numbers. Clearly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T &amp;lt;: T|U, U &amp;lt;: T|U&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T|U &amp;lt;/: T&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T|U &amp;lt;/: U&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;TypeScript intersection types are of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&amp;amp;U&lt;/code&gt; and are inhabited by values that
have type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt;. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: number}&amp;amp;{b: number}&lt;/code&gt; is inhabited by
all records with fields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, each of which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&amp;amp;U &amp;lt;: T, T&amp;amp;U &amp;lt;: U&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T &amp;lt;/: T&amp;amp;U&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U &amp;lt;/: T&amp;amp;U&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;part-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#part-1&quot;&gt;&lt;/a&gt;Part 1&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you would like to follow along with this solution, I have provided a
&lt;a href=&quot;https://www.typescriptlang.org/play?#code/C4TwDgpgBAKgFhAygV2gXigbwFBSgYzgEsAbAEwCcIA7ALigGYAaXAgQ2AGd6B2FvTmwC2AexAQy3KACZ+UMCKEQKbakVVTmrNgGsiwNlIAMcgG5EAXpxKH6J1gHMR5AGZFOcegFY5wKhE05fDYKKVlWSAoXZCUpAEYWAF8AbmxsUEgoFACAdX04ADlhAKgMHDwoAG1EKCJqKB0IEBEXLNROAF16TGpi+kREgDJszmqO1JT08GgAQRISeCR20rbc-KLYysbm1pG84ELiztSM6ABZDkI6h2yVgFEADz82fGAAHjmFhBGmKAAFELAdQkN6LbIAPnBlQA5L0lNDxmlTqtOCtylA4t0nK53J4oABOZLsUJ2ImCUTiST0fGTPDSbqRaKxbxEvwQAL0AAcROxZDcHi5tMYDMUylU6moYSJun0tgxrP8Ui8QoALFjnHzcfQ4kZpXoDFL5MomRyCUKvN1giSoF4iYyYqaAGx62VSGmpPCO9U4gUY3XsLjUolWqScoU8bps03SMnCMQSKQ8Hka-l4nVCzmWkKhu3Gh1SZ1QXmp7VC-FZwNQFV20UqNQaUlQKPGIU6yOK+gxgjEchUOh+2MUhPaoytzFYGUGke5qL5+jVqDmKw2eKt+kT-VyuIK9nGZM+vEMVsMBl55lQQvFrUD4mh1tqrDBSvcqCTuW2xeWaxy0cejEWx9sy5HdTQYQd4ypG1Wy9LAl2-Atgw4BD5FrcUGz9VsIw3V16ELJ9DXtc93VYOJM0fHtKBoIMixTa8uzfeJfxI8ssGbegwKNWdz39K9fUdIVpCMbo4JXdiXSnKB-TYjEBPHTARLlDiQ14cTFIE9dMEI00k27UhKP7bcUKUOsJUTAST1Yjsb2UglVMYgSH0wBiWRog9cKJBSCwEgDMHJCDNBAnNP2Xd8BJg+Sv1Eqsa2MtDJU7QLSz-aQsMwGzCVczVfS7aSVQEsiIpC5DeLTf0tLM5KWMK+D3KMsV63ixg7NwoUGCEyzd0bPzKSVZqzT-Bg5M87UZxNPcmys-iBo0mydOG+VdN7KiMIGizqqiwybMM8reFaxz5oy6SdT64i8AYHznKa4KaptRDrXTAbwvwsTFv06juuHRhWtS+aPwUWKGsTO6vIGgqtv9S6P3msMBqqyHEts16+07VV2vWn9EMrHTLqYvAVTk9KEeOzixsFP8VQ0y6F2krsSvY1U1rphbnoWy6YdYFVHKZl9Loy+a8vJnydqupnqas3Gq3C6SdOFwzudVVL-vq0zp1vFSJs6mRVQKmm+s2oCq1VKqmb+s9tL69m8C8NHeY8yK5UOqzpHNAmDf9D7IP9aHzQ06SyrN5ClZM9CBdYLw1vm-XK0LS6jz-LxHI9oLLsM-nzR8pnieFrsg7i+z46lqyMuFjiTfNVLY9GudJMxsJzQK4WF354GybD43aN9HSriW-s-tQwHW89NGtqJqvzwe1hHTk3LwJ6+cW4vIVHUpzdGIRrt5qmyfGY7w8x-N66Nolx1HNzgfbqR5biZs4+fMj-0bJfEul6eijkYv5vX1Xkcl9S7u3ovPvIGasvp-kdAVbmC88JvyvkvKqv0gEvXSuGNGTMH5IVqsLCWPBp5O1np9JSBs4jhhmhgq6bM7ZFV2n+Hga1K6HzlLTXeLUaGn37irG8SdqIs0tlAHgd97bANmnrbBr89Lv0IdHShN046sB4KlJmMt2HoWJn7cMBUDrBhgf2HSR1sFVWkoWM+HCXxcJkn+TkaMEGX37EY5RjVlQWNdtaPmgjqK8wzBpeahDrQ82-uY1gnII5uOihraMtckqBMcv-CRfUvYhOIRYnyLNCzWMus7CxT0DYcUujpeWFjUpmJfN4-cWU8S8M5BokJC4YnLXQVjDM7c3KI2MSo92cY56STLGjQxfUfEVVYPiOSZicn+JlgHH+f58SkOtEogGHDVFOzLGtMxm1tFIOyWWROHTPp+Jwnw6RUUJb4gzswg5NiEogK3ngfEWTrQcWFhlFOxyK7+IyuDQ5W5jk6ysguSBdVg6NR4GWKqZi7HzPQvEqhfDWxGBtmMxBUBikhNkXgHUzjeok2roZNRf4dQr32eC5WbSEYSx1GtaSDyJkXxZqdP0XMzlZ2pXsiSZKjCnOaakkJH4aawvCq0xqGVVn+y4qaCeaKjB-wNsi6FC50mwrBmQniZzdHi1hVVGyDz7HIV5XitsWBG6lJLBfZ5Y4MUvUNQCvO84xykMrEw5pxMcZjjWiza+6ya5hNXHqxyzzPkBUysaslcQfIjKNdeLl0LEkkTiHcgNwseWTTHK8-ZQqdmQRfPkmNDdtUuVllJKy0a0VxCaWUzB1KlIeqLRiQS7ZNZrPEctLVELGrXJrXJXJC9iYHTXL7X5Ft8GQXFTW11ZCanSv9dSNc0SiEPyraStcHKy0XwFZi3VJFpDhUzpOpFIi1w-WqQvJ5-jq1xGkBAs5T8K1HrXKW41xdc0tOpaetqdaxU7uLhW48BMPWFmkjKm6vC4gMBmfEHdlbG06OPKO2ZWjIMjSxeeNtwHHL-vA4OuueLzoVjdIihcq7qEkQYPy6lEN-EAaishhgCizmJs1lCm6wKsM-PrYirs4NjygvTUFf5uKSIqisQkkVpNEZoPvHJYWXcDbvLIY4-jfbNZdjMext294YNgcQ++r++zT2c2EiEmTsGrXn2HXEFUQtH1Ke4+rWpUG8UqnCpvI94bO73lSrrBhGnaX3gbtSx2mt8OPrk2ilUXGhwZrgz3BDPa8XWxwy9DzadYtyUUSIhGqL-waUtfNKT1pQ5ovDiKFtUg5X+IY1FDLIbtnhaColoTrYvACOhVJrGMViUOIa1uxlZVH2pwSQ1qV1ojHUtVZrOlIaWOmg-GYjKTNKteCqgR0Jl1I2AegqglVkWAH1JbHiqe+noUfhxhhlGe2CUSRqR68rak9srOszIRFyrmnjZPlmFxO6WVymQ46UN93XHQs-aKpU0E415sfQuIp0FBtr00wGsF0Ec3FeAoG68-nTQvfgSE7G-iOJmPyxiHgw8yEOuXddkrmEJPXpR76a+ZDKs8A0ql7TEk8KqbxbQt7uHqd4mx-s4LBOGWcoiZ6727OhYjeF7T+6ZKeDhRmzuwLSOVokXkaeIHjY-Zdpl1U6F0D4PnNWZhTH0KXy2dqnxtFljOfRZCX+wtrZORDSE4i-pkTLcKdNKYv7C8mMkSCdbwBnnLmSYd6hqy03vfM5-A75JE7ufI9yg7uX93LyMvXg7xWz7159V95bgqZiPw2WG+rrWeLORhf8sjubiL+clvhfslTlZDKG7xUMt9mKU4uZ562aZB2ZGkrwz39TFrqWlf2ZV-Ep9R8fa2+-fHJams3Wb-d13i9W+g5XdS1bUUMnMQPSbgdAYQbMUVe9qPBFH254xPiDVZDj2Eq1wJOFfej5tcBYaJmdLBJO4Byd5bOOn9zt3xhcN4QkJZBI1pZZZ8m091kojAw8Asd1ecJIv92V29kdHku0n8ushcvUXJH4n8U0JIOJoYEZeFBIdcbp8MJdz9JlWBBJb8z9JMu8p1kp9V0ZDQWZ6IT1wC4gO0T10sF5d86Qz1vRl06NTQydCMRC6EcdEU+tDtZIp8S9m12tkIb5ZIl1jUo4udNVZIcDl0H0ldCwzFeDodzc8FYdTt6DSIX9FIWDd1aCoI2Db9KxAcRNctgdkpa0DUgsFdhd+dpBpBcF6Mc8HDh0gigDODskd1AjpAd5mkqUS9kC5R8cgjqtK8HsQEm4sd1IfJpJC83ZHt1JC5FNwjhNq420gjzDHDpJ78Wd1IL1HUC160KjuJ1INUPUdI8cHCqjX1YIDN5DoCDJwDBo7Datw8TpzIoiXJP8iZzJgloUOIPMzd+p6CGAMjOkr0S8ds7BzJxcS8cili+pAjiMis1CXISknCv9qN4sFppZYjzIwYPVCjKwId7tTiDErJRkG9eiHINtntR4rCAk6R8YA8c5es-9hCZAKZuh0lBDsiHJFiboY5-ErMatpCYSEDJCa8fcHItDrwmUS8oYQlyCHM4SytHssDkoVRCl7tM0zl0EhsHJfMdjhjVY9EHJFst8TiAjvJBNms+px1KxAivBhl7sx8JIcUrJyCvAstmU39rUaUiFvJZCdMWjTRhTNBvJlCRNG8P8zkv9GsA8xZWMnC0ivBk8MTRNGSpjkovB98bp3Dq4SdjVoTpAvBWSRN9Yz8W96CFt0DPU0E-8MtN00ZmCQE5ZGSwpzVPUCi-jkpl4KT9k5oUVFTz5AjHQKVC10N49QF6DXtsIJJUzZV2SulEzftrSJDxoqYwoSMS9ZtDSF5yDHQajxkS8s5H0WzT8ayEVgS0jHRFtH0mSud80BJCduhhV5CRzWD6CcFkyJJQCD8j9vBxyZirpVi01rSIiOcDVqUVNpcHDyCeAZ17kyyiTvTwD+E7j6jgC8Dyy5zwoVsyylyl9xzFZH07dWiQzxyez1Z815jkoeBGDA4uz09kordfClcZNKw2jtJ8of8l8ntDD0yOFAjOR5TDi-9PDZy6R-dAIz8nN7z0LTzgEjoFd8pKzMi-luthc0jOQrTMiyN9lLt9d0L3MczgTS5ut8pEcLibx6EbJ3Ty9Ay5l+KaLmiBJ8Q0YpzgSZy1i6Q28iyMZjMOESyqCpK7VDRSC8zAj8RkTKNUL0JnT2jKpfV-FWcjNfopKCTfRmKUDhdwDbkxDtCB8rkpLM8S9WdnwjLW0pLFVYLei2MpKQL54nDl9tyJY2oASUKoAwU+SBojBYypDzkLdGAjBGcmy4r7sG0os19WA2ph9A8IzIdErsSeMsrNzWo0C9y2SQEPxRZqqslKxV91Koor82oPyldqCvKhDqq-zEZny8z8c2ohyldXzX88zh1Bph4rs6Kc9Wo+DLQq17K5QKNGFFqZoXiF4UqRrgM1dLyESls6VBpNiCEHCcoi5FrY9rR9SwcldprY07iiV39aoqqBo4gpV7VczZZFqCpO8uKd1HrQrzksEF1poYrjUTCU9fLydpoQjwk8y9c8qoqgiXLrwNTDQ2ZWp4jzjXqsj5cg8QTGBpByqwqmYXqlS20QN8jLCltuLHUcb6yRMJLl0vypscaiD7CQFTdiccaArkJ5pVrMMCrpBuSVDyi+lWp+jMBq8ibDIVtpbKcsL7yozml+cGAQN0bO4P09ZpbXUPVebfEEYRqNiA8FCUTwaCrsMsAmYDysaT1paDDjUjt-FqzcLGBbiCLMUiKKbpaBb3E5C8yTqGA4Yg6uCyyOqBNta8QesldtiRMTqwSOocTVKVEHCNbYTbbaL7ySDqk9pR0Wq-9cqAFqa9NaqRMIM8r3jrToSNjklf1s8pq9pSjEb6aM69ouaYcctAKCqVQvTq5JTGEkC9pxaRMGTEjHiBo4sU6StYaXJTVp7laRNCiz80rzp1zkaAEXxOTp67trSUjBb87p7okPVGzml2yV7WpjTZ6ENLUtpr7GLOltpp807GpeFzoOLNY8kc7nVp7-qBCibLKBkzoAyBjji8yd7flWpHR68pSUrLrNYMtiNxTrTKaTNijHoNIw1IyrazoszxjGxjqhSYHdTq4jD+L1q3QYHF92qF4erLyYGN92kqzyiYG-4PUjibpXaWKYH89I9stbcYGx7q5V657sqqzvo4Hub5oc5n1vpYzebWsLlnCCqGdCGn0S9uD1Tvpszvy36uc5tvpT79dx1DzgS67rzyJ9duiPjHLvonyeC-8STFCBpVds7mkoGkGXdvomjl1u0wDgq3GvizSe6DGbVQYZL6Tcz10zpHcY7g9qUI9rSTqMK7i86o1hbVzQYiqf71aLZWpOQTG8rU9mje64nY9vqnDoaD7CmN93VTGLrCmvrxoE07SCrKk8alTD6uo-tCmQnU7bYiaP7pKA9MbVZHlWolK0o79JbgTpre9vaXoiKWZkH9KNGLzB6O7YYyHzwh6YdYnGATkumMz6GfHYZ+VH1-tuG+o678QajiZeMllYYB7zwu4z6HCTqb8FyvsQCHCr8BNIbUcqSQFoSBMf1GmibxnS8OYMqfnxHH557DZyYjADK1rEU8n-HUZBd-GWHMi2qbtYWLpAGiLhY20BNLn46gqVz8y8ZJUEmsjP5clUYBrNnx4UqMsBNjdGMkWGHB7VR2DRYkCEZ+d8ZFG3LGryZRClnHC2mib8d8Y0WA1O0JHMjyWzNAy4L1DZ0BWLNuqgSyWBX6mtXap5UpXPKRMammK4kBXnj9cX6GzwMBW71gXVXOkkjx7VQfDZazkzHu7cjyZgjJz7sCWhE+bA2PcNN-ksEvWiqPWXT0svWzrIJt8VLFbA3abvGnDMXtCvWN80cNMY3A2ur+K502LEVeEKYBqTXA9ViFWxb4X-yrnhdyWZaUkgSNDyYxjrG8rPtMVJmu3MKV60t7y6UVRNbG3QkAKiaAWzbb6NyVq-8FWbaODZizltHFyGYn7zr7z7aWEOYva0oPmnC47+LOWGBXmxUsmsjZoGYRH2W-9USdHyZo7wGkKm7saX3l7q4+3g9L9VQs6Znjbc6EyOZx3zaM6p6wP9oQkN2vkl2APaHh7wqa2x3yTlKA0dLM4APHS6HwmL5d6wOA7irn0y2SmAOBnojrQGrL1VQZ7MBNckafzBZv3uJmzymqw5TJ3TTPdEUx3CsPH-GMW+pyWE4NHV8HXLW6PM2tMVXM4JZzNt3IIuGd8b1BYLXsUyOAFpTNZK3PSDrq4UrDM7xBZXDxpVjRtQJVRYGNGtTy0tHrOEaA1VixHB5JZMqL7hWVHRWCGZWeHiDtmOZCzV3PUltXOHy8YfsGX9nGwWYfON93aFo-byZWyDOH37yjbvUgvL3xHBK2cgvuWKsfckXq1aTwys8Z2CnyZ5zBPtC8Xn7T38bRX1HauI03Ki2OZdyfX8moWyzmvSLlmsdpyFYkO10i4jyFZHHfimOVGAX3HfJ7sa3togsFZJsDTASoWFZ72tMi9PntZwzH143zxEux34nAIi6T2PttYstetr2vGObyZ8Luu2aR3s5tYZ1Aq8ytP35TuG7IW-VhntZHM0zg7zyFPOQOH9clGj7MntYBqenOEPjtZCuHYRPwKOZRm32op-Otw+ujZEKooJ7l0junQjZI2XpVkkXyX1mMObdDtmyjZzKWKzmiax3jmsfcenC7qYW8ZnL53Q2F6LKjYu6E86at8jYAGdMgS8cjYQbr2XGZFzRn9zv1vYrVj2YUggA&quot;&gt;TypeScript playground&lt;/a&gt; with all the code. To see what types have been
instantiated, simply hover over their name; for example, hovering on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatchingSue&lt;/code&gt;
should yield &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the full problem statement, please refer to the AoC (not &lt;a href=&quot;https://en.wikipedia.org/wiki/Alexandria_Ocasio-Cortez&quot;&gt;AOC&lt;/a&gt;)
link above. In short, we have a list of facts about the exact aunt Sue we are
looking for, which we can express a record type:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pomeranians&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;akitas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vizslas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Observe that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;children: 3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; is a type, not a value.
It is a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt; inhabited by exactly one value, namely the number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also have a bunch of candidate aunt Sues, each of which we know a subset of facts about.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pomeranians&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;akitas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;akitas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;akitas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;/// 495 more Sues&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The record of facts for each aunt Sue is indexed by a numeric reference (Sue 1,
Sue 2), etc. Observe that the fields of facts known for each Sue is a subset of
facts we know about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;. Only one of these candidates’ facts exactly
match the corresponding facts associated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that not every Sue is a supertype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;; for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues[1]&lt;/code&gt;,
which has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{goldfish: 9, cars: 0, samoyeds: 9}&lt;/code&gt;, is not a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;
because (for one) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue['goldfish'] = 5 &amp;lt;/: 9 = Sues[1]['goldfish']&lt;/code&gt;. Remember, the number literals are types in themselves!&lt;/p&gt;

&lt;p&gt;Here’s how we’re going to do this pattern matching: if there is an Sue
that matches &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, their facts will be a supertype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, or said
another way, their facts will be a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; with respect to only those
facts (in fact, when only common fields are considered the types must be equal).
So, for each Sue &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CandSue&lt;/code&gt;, we’re going to “pick out” fields from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; just
enough to match the fields of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CandSue&lt;/code&gt;, producing a new type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSueMatcher&lt;/code&gt;.
Then, we check the subtype relation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CandSue &amp;lt;: TheSueMatcher&lt;/code&gt;, and if it holds,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CandSue&lt;/code&gt; is the Sue we seek.&lt;/p&gt;

&lt;p&gt;What does this subtype check look like? Thanks to TypeScript’s optional field
syntax, wherein &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a?: number}&lt;/code&gt; means “a record with field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; of type string, or
no field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; at all”, we can write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Partial&lt;/code&gt; type constructor&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;partial&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;partial&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Partial&lt;/code&gt; is generally provided directly by the TypeScript standard library.&lt;/span&gt; that given a
record type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;, will yield a supertype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; where all fields are optional:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// yields {noise?: string}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[F in keyof T]?: T[F]&lt;/code&gt; is a mapped type that means “for every key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K&lt;/code&gt; of
(the record type) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;, make it an optional field whose value pair has the same
type the value pair corresponding to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K&lt;/code&gt; had in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;”.&lt;/p&gt;

&lt;p&gt;Now, we can check if a candidate Sue is the one that we are looking for by
checking whether it is a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Partial&amp;lt;TheSue&amp;gt;&lt;/code&gt;. For example, we will have
that&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{trees: 9, cars: 4} &amp;lt;: Partial&amp;lt;{trees: 9, cars: 4, akitas: 2}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;because
all fields of the subtype match the fields of the supertype, and the
unmatched fields of the supertype (namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;akitas&lt;/code&gt;) are optional, so they do not have to be
present in the subtype&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;type&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;type&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Notice that it is also the case that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Partial&amp;lt;{trees: 9, cars: 4, akitas: 2}&amp;gt; &amp;lt;: {trees: 9, cars: 4}&lt;/code&gt;.
What does this say about the set properties of the TypeScript type system?&lt;/span&gt;. Moreover&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;trees&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;trees&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;A natural question is,
why is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trees&lt;/code&gt; not completely elided during the subtype comparison, forcing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{trees: 1} &amp;lt;: {}&lt;/code&gt;? The reason is that the optional syntax (&lt;a href=&quot;https://github.com/ayazhafiz/rats#lossy-type-downcasting&quot;&gt;tries to be&lt;/a&gt;)
structure preserving; informally, the checking algorithm for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a?: T}&lt;/code&gt; is “if
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; is not present, OK; else the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; present must match &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;”. Note that
this is distinct from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: T|undefined}&lt;/code&gt;, which has no type relationship with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a?: T}&lt;/code&gt;.&lt;/span&gt;,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{trees: 1, cars: 4} &amp;lt;/: Partial&amp;lt;{trees: 9, cars: 4, akitas: 2}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;because&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{trees: 1} &amp;lt;/: {trees?: 9}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To actually check the subtype relation, we can query TypeScript’s typechecker via
&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html#conditional-types&quot;&gt;conditional types&lt;/a&gt;.
The conditional type&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Means if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt; is a subtype of (extends) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; yield &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;; else, yield &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;. For
example:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So for a single Sue, we can define a type constructor&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type IsTheSue&amp;lt;Sue&amp;gt; = Sue extends Partial&amp;lt;TheSue&amp;gt; ? true : false;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;that will yield &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; when passed the Sue we’re looking for.&lt;/p&gt;

&lt;p&gt;But we need a way to perform this check over 500 (!)
candidates, so some control flow or parallel evaluation mechanism is required.
We can get the latter using TypeScript’s &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types&quot;&gt;distributive conditional
types&lt;/a&gt;.
The idea is that when using a union type in a conditional type, the typechecker
will distribute the conditional type over the union’s variants. For example&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;unknownnever&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;unknownnever&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unknown&lt;/code&gt; is TypeScript’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Top_type&quot;&gt;Top type&lt;/a&gt; - the
type inhabited by every value. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt; is TypeScript’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Bottom_type&quot;&gt;Bottom type&lt;/a&gt; - the type
inhabited by no value. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T|never = T&lt;/code&gt; because nothing can fit in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt;, so
the values inhabited in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T|never&lt;/code&gt; are only those inhabited in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;.&lt;/span&gt;,&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PickFieldA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PickFieldA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AFields = (1 | 's') due to the expansion:
    PickFieldA&amp;lt;{a: 1}|{b: 2}|{a: 's'}&amp;gt;
  =   ({a: 1} extends {a: unknown} ? {a: 1}['a'] : never)
    | ({b: 2} extends {a: unknown} ? {b: 2}['a'] : never)
    | ({a: 's'} extends {a: unknown} ? {a: 's'}['a'] : never)
  = 1 | never | 's'
  = 1 | 's'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we just need to feed a union of the 500 Sues into a conditional subtype check
against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Partial&amp;lt;TheSue&amp;gt;&lt;/code&gt; (for example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsTheSue&lt;/code&gt; constructor above), and
we’ll get the Sue we’re looking for!&lt;/p&gt;

&lt;p&gt;We can extract such a union from our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues&lt;/code&gt; record type by mapping over all the keys of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type SueCandidates = Sues[keyof Sues];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This says “index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues&lt;/code&gt; by every key of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues&lt;/code&gt;, and give be back all of those
results”. Clearly, this must be a union type, since we are extracting all of 500
individual types.&lt;/p&gt;

&lt;p&gt;To understand how this works, let’s perform a small expansion. Recall &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues&lt;/code&gt; is
of the form&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;/// 498 more Sues&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues[keyof Sues]&lt;/code&gt; becomes&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could immediately do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsTheSue&amp;lt;Sues[keyof Sues]&amp;gt;&lt;/code&gt;, but this actually is not
very useful! Thanks to distributive conditional types, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsTheSue&amp;lt;Sues[keyof Sues]&amp;gt;&lt;/code&gt; would yield &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false | false | ... | true | ... | false =
boolean&lt;/code&gt;, and this gives us no information about who the actual Sue we were
looking for is.&lt;/p&gt;

&lt;p&gt;What we can do is something like this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MatchingSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatchingSue&lt;/code&gt; would be a union of all Sues whose fields match corresponding
ones in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;. To see why, let’s expand this a bit:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MatchingSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* some sue that matches */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* some sue that matches */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;never&lt;/code&gt;s all collapse because they cannot be inhabited by a value and hence
do not contribute to the union type; in the end we have just the Sue(s) we’re looking for.&lt;/p&gt;

&lt;p&gt;Well actually, we’re not quite done, because part 1 of the problem asks us for
the index number of the Sue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues&lt;/code&gt; that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatchingSue&lt;/code&gt; corresponds to. I am not aware of a way of
to perform an inverse lookup of a non-primitive type in a record type, so we
can’t find the index of a Sue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sues&lt;/code&gt; after it’s been extracted.
However, we can propagate the index of each Sue by adding it as an extra
field on the info we know about each Sue before constructing their union and
performing the matching:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesWithNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// produces rows of form &quot;1: {name: 1, cats: 10, goldfish: 5, ...}&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesWithNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesWithNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MatchingSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we have the name of the Sue we were looking for!&lt;/p&gt;

&lt;h2 id=&quot;part-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#part-2&quot;&gt;&lt;/a&gt;Part 2&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you would like to follow along with this solution, I have provided a
&lt;a href=&quot;https://www.typescriptlang.org/play?ssl=34&amp;amp;ssc=6&amp;amp;pln=34&amp;amp;pc=14#&quot;&gt;TypeScript playground&lt;/a&gt; with all the code. To see what types have been
instantiated, simply hover over their name; for example, hovering on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatchingSue&lt;/code&gt;
should yield &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;241&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hopefully Part 1 gave you a feel for the power and expressiveness of
TypeScript’s type system, and the relative ease by which we can perform
singleton pattern matching with the TypeScript typechecker.&lt;/p&gt;

&lt;p&gt;Part 2 of the problem is a bit more complicated&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;part2&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;part2&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Having built familiarity with the type system and with more work to do in this
part, we will move faster in our constructions.&lt;/span&gt;.
Copying &lt;a href=&quot;https://adventofcode.com/2015/day/16&quot;&gt;the problem statement&lt;/a&gt;
(not visible unless you have correctly answered Part 1):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cats&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trees&lt;/code&gt; readings indicates that there are greater than that
many …, while the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pomeranians&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goldfish&lt;/code&gt; readings indicate that there
are fewer than that many …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clearly, we can’t compare singularly-inhabited primitive types anymore, as,
for example, the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cats&lt;/code&gt; in the Sue we wish to find can be any value
greater than the value inhabited by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue['cats'] = 7&lt;/code&gt;.
There is no way to formulate a type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GT_N &amp;lt;: number&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GT_N&lt;/code&gt; is inhabited only by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt;s greater than some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;
– not directly, anyway. Our approach will be to find a way to mark relevant
fields (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cats&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pomeranians&lt;/code&gt;) in information known about each Sue as
greater or less than the corresponding field in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, and then perform the
same subtype comparison as we did in Part 1 to find the matching Sue(s).&lt;/p&gt;

&lt;p&gt;First, let’s think about how we could perform greater/less than comparisons in
the type system. In general, this comparison can be done between two integers by
subtracting them and comparing the result to 0. There is no idea of numeric
subtraction in the TypeScript type system itself, so we need to find some
encoding for numbers on which we can perform an operation corresponding to
subtraction.&lt;/p&gt;

&lt;p&gt;With some thought, the most natural idea is to encode natural numbers with
tuples. In TypeScript, a tuple type of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[T_1, T_2, ..., T_N]&lt;/code&gt; holds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;
values where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t_i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; value has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T_i&lt;/code&gt;. Each tuple type has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt;
property whose type the number of type fields; in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;.
We will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; property to encode natural numbers;
shortly, we will see how to exploit tuples for arithmetic operations.&lt;/p&gt;

&lt;p&gt;To extract the natural number encoded in a tuple’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; property, we define
a type constructor:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TupToNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;TupToNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infer&lt;/code&gt; is arguably the most powerful construct provided by the TypeScript
typechecker; it instructs the typechecker to construct a constraint to resolve
an uninstantiated type (in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;), and to solve the constraint
transparently. The typechecker is basically solving the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; “for us”;
it’s like type reflection inside the type system!
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infer&lt;/code&gt; will be our best friend for this part.&lt;/p&gt;

&lt;p&gt;To encode a number in a tuple, we can define a recursive type constructor that
builds up a tuple until its length is that of the number we wish to encode:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tup&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Tup&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [unknown, unknown, unknown]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we can define subtraction between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; via a type constructor
that queries the typechecker for the elements missing between the elements of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; (let’s call this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Diff&lt;/code&gt;), and returns the length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Diff&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TupToNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clearly, this only works with natural numbers and when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A &amp;gt;= B&lt;/code&gt;, but that is
good enough for our purposes of building greater than/less than comparators.
Let’s do that now, in both cases performing the comparison between two numbers
by “walking them down” until one hits 0.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;FAIL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GTTest1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GTTest2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GTTest3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LTTest1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LTTest2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LTTest3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, now we’re ready to apply all this to the problem. First, let’s define type
constructors that take a record type of facts we know about a Sue, a field to
verify is greater than/less than that of the corresponding field in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, and
yield an updated record type with a boolean flag indicating the result of the
verification on the checked field name.
If the field we wish to verify against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;
isn’t present on the Sue record type we pass, we can just return the record type
as it is, since that field can’t be matched against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; for this Sue anyway.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[f in F]&lt;/code&gt; to extract the properties we want to compare against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;.
Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F &amp;lt;: keyof TheSue&lt;/code&gt;, in theory we could pass in a union type as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; and
get multiple fields to match against (e.g. if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F = 'a'|'b'&lt;/code&gt;, we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T extends
{1?: number, 2?: number}&lt;/code&gt;), but in practice we will use single-union types here
(like just one string variant). We cannot say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{F?: number}&lt;/code&gt; directly, as then
the field we are trying to match would be named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; rather than the instantiated
type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Omit&amp;lt;T, U&amp;gt;&lt;/code&gt; is a type constructor that removes from the record type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; those
fields that are a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt;. Formally,&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exclude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exclude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Omit&lt;/code&gt; provided by the TypeScript standard library has a differently-written
definition, but the behavior is the same.&lt;/p&gt;

&lt;p&gt;We perform &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{[f in F]: LessThan&amp;lt;T[F], TheSue[F]&amp;gt;}&amp;amp;Omit&amp;lt;T, F&amp;gt;&lt;/code&gt; (and similarly
for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GreaterThan&lt;/code&gt;) because once we have determined whether the checked field is
indeed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LessThan&lt;/code&gt; that of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, we would like to return a fresh type with
that data and all other data we already know about this Sue, sans the exact
numeric type we knew about the field we just checked. In constructing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckLessThan&amp;lt;'cats', {trees: 2, cats: 5}&amp;gt;&lt;/code&gt;, if the less than check yields
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;, the constructor yields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{cats: false}&amp;amp;{trees: 2}&lt;/code&gt; (a type equivalent to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{cats: false, trees: 2}&lt;/code&gt;). Keeping the checked field’s numeric type
would yield &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{cats: false}&amp;amp;{trees: 2, cats: 5} = never&lt;/code&gt;, as there is no value
that can have a field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cats&lt;/code&gt; whose value inhabits both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we define type constructors to take a record type of some Sue facts,
compare its fields against those of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; for which we need to know
greater than/less than relations, and yield a record type with that data.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SueCheckFieldsGreater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SueCheckFieldsLesser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CheckLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pomeranians&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SueCheckFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;SueCheckFieldsLesser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SueCheckFieldsGreater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; type is inhabited by all values, but is more flexible than the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unknown&lt;/code&gt; type in that values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; also inhabit every &lt;em&gt;other&lt;/em&gt; type&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;whyany&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;whyany&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; is an “escape hatch” from the type system, usually used
to deal with the fact that variables are untyped in JavaScript. Here, our
purpose is a little more sinister.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I leave as an exercise to the reader why the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PartialUnconstrained&lt;/code&gt; bound is
needed for the above type constructors, and why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SueCheckFieldsGreater&lt;/code&gt; cannot
be defined as&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SueCheckFieldsGreater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and what extra work would need to be done in order to define it in this way.&lt;/p&gt;

&lt;p&gt;Next, we need to rewrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; in a manner that it can be matched against the
greater than/less than field constraints we recorded on each Sue record type via
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SueCheckFields&lt;/code&gt; constructor. Since for the Sue that we want to find those
greater than/less than field constraints should all be typed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, let’s
redefine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; that way:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckedFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pomeranians&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSueChecked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckedFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckedFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we perform the checking on each Sue, extract a union of them all, and
yield a subtype comparison against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TheSueChecked&lt;/code&gt; as in Part 1.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesCheckedWithNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SueCheckFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesCheckedWithNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesCheckedWithNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MatchingSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSueChecked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All done, and in exactly 0 lines of runtime code!&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#epilogue&quot;&gt;&lt;/a&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;I hope this cc provided you with a demonstration of the power of TypeScript’s
type system, and maybe gave you some ideas of how to exploit it in your own
work.&lt;/p&gt;

&lt;p&gt;I am not aware of other type systems in popular programming languages similar to
those of TypeScript’s in terms of reflection and the typing of primitive
literals. Our treatment of tuples above was nice for encoding naturals, and can
also give way to a weak kind of dependent typing:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prev&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InitArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, &quot;b&quot;, 3] &amp;amp; {length: 3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that this is not strictly type safe due to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; cast and requires a
formal type annotation, but the idea is intriguing. It is unlikely, however,
that this kind of use case will ever make it as a first-class citizen in the
type system.&lt;/p&gt;

&lt;p&gt;The behavior of distributive conditional types may appear to be a little bit
odd, as raw union types certainly don’t distribute over type
operations&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;obj&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;obj&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Values inhabited by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Obj&lt;/code&gt; include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{b: 2}&lt;/code&gt;, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Obj&lt;/code&gt;
cannot have a property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;. In fact, values of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Obj&lt;/code&gt; have no typed
properties until narrowed to know they have a field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/span&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsFromRaw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error: Property 'a' does not exist on type 'Obj'.&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PickA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsFromPick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PickA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1|3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are ways to get around this distributive behavior in conditional types,
but they are outside the scope of this cc. Just know they are out there, and
check them out if you’re interested :slightly_smiling_face:.&lt;/p&gt;

&lt;p&gt;And don’t worry – as all good things do, the TypeScript type system has holes. See
&lt;a href=&quot;https://github.com/ayazhafiz/rats&quot;&gt;raTS!&lt;/a&gt; for some; see the &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues&quot;&gt;TypeScript issue
tracker&lt;/a&gt; for many more.&lt;/p&gt;

&lt;p&gt;Anyway, I hope you enjoyed this. Please email me if you have any comments.&lt;/p&gt;
</description>
				<pubDate>Sun, 27 Dec 2020 02:00:00 -0600</pubDate>
				<link>https://ayazhafiz.com/articles/20/pattern-matching-with-a-typechecker</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/20/pattern-matching-with-a-typechecker</guid>
			</item>
		
			<item>
				<title>impact vs innovation &amp; industry vs academia</title>
				<description>&lt;p&gt;I was recently reading Evan Martin’s blog post on his &lt;a href=&quot;http://neugierig.org/software/blog/2020/05/ninja.html&quot;&gt;takeaways from developing
the ninja build system&lt;/a&gt;,
and one thing Evan mentions is his frustration at engineers that don’t look at
related work when designing systems. This reminded me of Rado Kirov’s posts on
&lt;a href=&quot;https://rkirov.github.io/posts/incremental_computation_3/&quot;&gt;incremental computation&lt;/a&gt;,
where Rado argues that a lot of work in the space of incremental software is
underdeveloped because of the lack of cooperation between academic and industry
actors. Which isn’t a novel realization in general, but recently was a novel
realization to me, and has me thinking about something more general. So first a
motivating comment on that, and then we’ll specialize back to the “divide” between
academic and industry work.&lt;/p&gt;

&lt;p&gt;A large thing I have been struggling with in my (so far incredibly short) career is
a frequent incongruency between what I believe is impactful and what I believe
is innovative work in an opportunity. Though “impactful” and “innovative”
are broad and personal terms, in general I mean “impactful” work to be that
which improves the quality of products broader than the work itself&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;impactful&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;impactful&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;For example, reducing store waiting lines by 20% is impactful to
a business and its consumers&lt;/span&gt;, and “innovative” work to be that which is
novel in its domain&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;innovative&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;innovative&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;For example, the derivation of a
theorem.&lt;/span&gt;. Now, I certainly don’t mean to claim there is no overlap in
impactful and innovative opportunities, or even that some overlap is uncommon,
but I do argue that opportunities with a large degree of impact and innovation
in the steady state&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;steady&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;steady&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;because certainly, anything can one day
be made into an innovation or induce a great impact!&lt;/span&gt; are not all that
common.&lt;/p&gt;

&lt;p&gt;Now back to the note we started this discussion with – I think the clearest
place where this divide comes up is in this distinction between industry work
(impact by way of application) and academic work (innovation by way of theory).&lt;/p&gt;

&lt;p&gt;Even though theory and application are complementary - theory inspires
application, inspires new theory, etc. - I believe that popular culture has
separated these two ideas by a thin bridge. This is evident even in the divide
we understand between theory and application!&lt;/p&gt;

&lt;p&gt;Of course, this divide is very purposeful. You can’t do everything at once, and
we know that the $\text{scientist}\leftrightarrow\text{engineer}$ model works well;
it’s been alive for a very long time. The problem comes when people working on
applications lack knowledge of theory (and do not seek to learn it!), or vice
versa. Then, what
is novel to an individual is not necessarily novel in general, and time is wasted approaching
a problem from an industrial direction when theory has been developed for a
version of the problem. Or vice versa.&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;related&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;related&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;A related problem
is effective knowledge sharing between domains and how to fill “valleys” in the N-dimensional landscape of
popular knowledge.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Here’s an example: my experience contributing to teams working on industrial
programming languages, I have noticed that relatively few people working in this
space in have background knowledge in programming language theory (even
self-taught!). Generally this is not an issue, but sometimes a problem comes up
that the team has not experienced before, and spends a lot of time “figuring
out”, but the problem in general is well-known and solved.&lt;/p&gt;

&lt;p&gt;This is a hard problem – the biggest
challenge is that you don’t know what you don’t know, and the first step is even
learning enough to realize what you don’t know. A final example: recently I got
into abstract rewriting systems, but for a while I didn’t even realize the
problems I was trying to solve were well-known in the theory of rewrite systems
until about a month in! Obviously, after that, things got a lot easier.&lt;/p&gt;

&lt;p&gt;All right, so maybe now you’re saying, “this is an ok observation, but so what?
What can we do about it?” Well, I suggest the following personal steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inspire the relationship between formal methods and their applications during
education - concentrations like “Applied Mathematics” deserve a fair share of
theory, and “Theoretical Algorithms” deserve a fair share of applications, at
least enough so that individuals new to a field have enough of an
understanding of the larger ecosystem to know what they don’t know, what is
useful, and what isn’t.&lt;/li&gt;
  &lt;li&gt;Seek out answers to ideas that are novel to you - while they may be novel to
you, they are likely not novel in general. Instead of reinventing the wheel,
first research to discover if the problem has already been solved. As
mentioned, figuring out how to discover whether the problem has been solved
may not be trivial, and so some prerequisite knowledge of the domain is
required (perhaps via (1)).&lt;/li&gt;
  &lt;li&gt;When developing novel solutions, start from formal models.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s either that, or get very knowledgeable about everything. I’m not certain
which is more realistic, but I have a suspicion. And as always, if you have thoughts,
I &lt;a href=&quot;mailto:ayaz.hafiz.1@gmail.com&quot;&gt;would love to hear from you&lt;/a&gt;!&lt;/p&gt;
</description>
				<pubDate>Tue, 01 Dec 2020 02:00:00 -0600</pubDate>
				<link>https://ayazhafiz.com/articles/20/impact-vs-innovation</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/20/impact-vs-innovation</guid>
			</item>
		
			<item>
				<title>heterogeneity in volunteering</title>
				<description>&lt;blockquote&gt;
  &lt;p&gt;Note: This article is written with regard to ad-hoc volunteer programs, and
less so with regard to long-standing, consistent volunteering commitments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I went volunteering this past weekend for the first time since late March 2020
(around when the covid-19 pandemic began taking large swing in the U.S.).&lt;/p&gt;

&lt;p&gt;What are the characteristics of an individual who, during a pandemic, goes to
volunteer at a home for those experiencing homelessness? In my opinion, such an
individual is fairly invested in volunteering in this space. But what
surprised me about this session was the vast diversity of my fellow volunteers’
motivations for volunteering at the home.&lt;/p&gt;

&lt;p&gt;A senior couple told me they were excited to give someone a meal and help
contribute to the home’s rehabilitation program.
They wanted to see men experiencing homelessness get an education, find a job, and obtain
stable housing. The two, working with their local church, produce personal care
bags handed out to those they see living on the streets. Only once has a
recipient of a bag asked them for money instead&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;bag&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;bag&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This surprised me a lot. My
first impression was this would an example of giving presumed help, not the help
someone actually needs.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;A lawyer 25 years my senior said she was there to say hi to the men, many of
whom were now her close friends. As a side effect of her contribution for the
day, she would take home the egg shells and cardboard cartons for thirty dozen
eggs, which she gave to her composting and flower-growing neighbors
respectively. Why was she volunteering at this home? Well, it is quite
enjoyable and meaningful as a sense of community for her. In
fact, aside her apartment, this is the only indoor location she has been in since
the pandemic has taken large swing; she has not even ordered food in.&lt;/p&gt;

&lt;p&gt;As for me, I came because I wanted to speak to men experiencing homelessness
and learn how the pandemic has affected their livelihoods. It was my first time at
this home, and I wanted to learn about the experiences of the administrators of
the home, how the home operates, what the men in the home find challenging about
the home’s operations, and what unique initiatives the home drives.&lt;/p&gt;

&lt;p&gt;I list these motivations because they are very different, well-formed
perspectives.
Perhaps I had not noticed such diversities in reasoning in
previous volunteerings, perhaps I needed a several-month break, perhaps
this diversity is just characteristic to a group of individuals that would
volunteer in such a time, or perhaps something else.&lt;/p&gt;

&lt;p&gt;In previous volunteerings, I found that the motivations of my fellow volunteers were
often “non-interesting” – they were there to complete a requirement, try something new,
or just learn about a cause. For me, new insights and perspectives would come
from those impacted by the volunteering, and rarely from my peers.&lt;/p&gt;

&lt;p&gt;This time, I learned the most from my peers. This was such a great thing! I
felt surrounded by passionate, genuinely dedicated individuals in a way that I
had not before. It felt like a team in a way that I had not seen from ad-hoc
volunteer programs before.&lt;/p&gt;

&lt;p&gt;I am hungry to find more such programs. I write this as a retrospective,
inviting you to find such environments as well. And if you’re already a
part of one, I’d love to hear about your experience.&lt;/p&gt;
</description>
				<pubDate>Mon, 21 Sep 2020 03:00:00 -0500</pubDate>
				<link>https://ayazhafiz.com/articles/20/heterogeneity-in-volunteering</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/20/heterogeneity-in-volunteering</guid>
			</item>
		
			<item>
				<title>on understanding</title>
				<description>&lt;p&gt;A juice diet is a fad. If it is to be ubiquitous, equity is not. Neither is the elimination of
racism, or the distribution of healthcare, or the raising of millions out of poverty, or the safety
or artificial intelligence, or the protection of endangered species, or any number of other things
you or I may wish to see succeed.&lt;/p&gt;

&lt;p&gt;Let’s call these &lt;strong&gt;hard problems&lt;/strong&gt;. These are problems large communities are passionate about, and
cannot be solved in five, twenty, or even fifty years.&lt;/p&gt;

&lt;p&gt;In most cases, the general population’s commitment to these problems seems to follow that of a
fad&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;feels-fad&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;feels-fad&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;I am not saying this distribution is anywhere near representative; it is simply how it feels to me.&lt;/span&gt;:&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/exp_of_exp.png&quot; /&gt;&lt;figcaption&gt;time vs perceived number of people committed to an issue&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;On the tail end, the number of people involved in resolving an issue converges to a value determined
by a function of how many communities want resolution of the issue, how many don’t, and how many are
indifferent. Note that only the first factor necessarily increases the convergent value.&lt;/p&gt;

&lt;p&gt;This convergence is expected – the world can’t dedicate all of its resources to one thing, and it’s
the whole reason for specialization. But if you are invested in an issue, and you want to see it
succeed, be committed to it. Not doing so is &lt;a href=&quot;#on-nomenclature&quot;&gt;dangerous&lt;/a&gt;; because these kinds of
issues take a very long time to solve, an initial high investment in a topic may cause workstreams
in that domain to continue expecting a similar investment. If the investment suddenly declines,
projects quickly fail.&lt;/p&gt;

&lt;h2 id=&quot;prelude&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#prelude&quot;&gt;&lt;/a&gt;Prelude&lt;/h2&gt;

&lt;p&gt;My hope is this cc will encourage you to consider your world in a larger scope, ask more questions
about it, and recalculate your reality. It’s nice to sit around, sharing fundraisers and correcting
misinformation, believing there are a well-defined set of steps we all can take to solve a common
problem. But this is naive and unrealistic; if it were so easy, no problem would be hard.&lt;/p&gt;

&lt;p&gt;These ideas apply to many things, but the context of this cc is social problems. To that end, it
doesn’t matter how many anti-racism protests you attend or how much money you donate towards
eliminating homelessness if you can’t empathize with affected communities. Without empathy, you will
quickly reach a barrier in your understanding another’s needs&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;russia&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;russia&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This comes from my experience in
Russia – a white person who has only ever known other whites may not be a racist, but there is also
no way for them to stand up for a black person (or any minority) in an effective manner.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I hope the perspectives in this cc are of some use to you. At the same time, they are the thoughts
of a single individual and should be scrutinized.&lt;/p&gt;

&lt;h2 id=&quot;on-perspective&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-perspective&quot;&gt;&lt;/a&gt;On perspective&lt;/h2&gt;

&lt;p&gt;It’s important for you and I to understand the roles we play in the problems we are invested in.
Failing to understand this unsyncs our expectations with others’, which derailing priorities and
causing internal conflicts. Understanding this is one part of &lt;a href=&quot;#on-the-big-picture&quot;&gt;the big picture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The experiences of one individual will never be exactly like that of another.
Commonalities can be found, but claiming lived experience of another’s life is absurd. This is why
empathy and &lt;a href=&quot;#on-research&quot;&gt;research&lt;/a&gt; become pivotal skills to master; you will never live
another’s experience, but you can learn to empathize and try to understand another’s perspective.&lt;/p&gt;

&lt;p&gt;We must learn others’ perspectives if we are committed to solving problems together. There is a
common mantra here that goes something like&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Give people the help that they need, not the help you think they need.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;because if we only give the help we think others need, at best we’ve fallen out of sync, and at
worst we’ve derailed the mission.&lt;/p&gt;

&lt;p&gt;There as a second, more subtle point to the above statement – hard problems are not about any one
individual, and there are very rarely single heroes in their solutions. A good solution requires
understanding the needs of hundreds of millions of people, which one individual can rarely do.&lt;/p&gt;

&lt;p&gt;Furthermore, though every individual has a contribution to make, the solutions to such problems are
moonshots. And because nothing is perfect, an actions of an individual to help one group may be
regressive to another group (see &lt;a href=&quot;#on-intersectionality&quot;&gt;intersectionality&lt;/a&gt; below).&lt;/p&gt;

&lt;h3 id=&quot;go&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#go&quot;&gt;&lt;/a&gt;go!&lt;/h3&gt;

&lt;p&gt;Maybe this seems romantic. If that’s case, do &lt;a href=&quot;#on-research&quot;&gt;research&lt;/a&gt; and speak to people involved
in the things you care about. Keep sharing instagram stories and correcting ignorant statements, but
recognize that without deeply understanding an issue, one’s actions are limited and often naive.&lt;/p&gt;

&lt;h2 id=&quot;on-intersectionality&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-intersectionality&quot;&gt;&lt;/a&gt;On intersectionality&lt;/h2&gt;

&lt;p&gt;Because no two individuals have the same lived experiences or perspectives, it’s impossible to
design an exhaustive solution to an issue&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;full-employment&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;full-employment&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;In mathematics, this is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Full_employment_theorem&quot;&gt;full employment theorem&lt;/a&gt;.&lt;/span&gt;. I’m not
saying we shouldn’t shoot for solutions that solve problems for everyone, but what I am saying is
that we can’t spend all our time just looking for the “perfect” one because then nothing ever gets
done, and no one is better off.&lt;/p&gt;

&lt;p&gt;So what is much more important is to shoot for milestones - maybe solutions that cover 90% of the
problem, then 95%, then 99%, then 99.9%, and so on. Milestones prove that things are getting done,
which is useful for morale and future investment.&lt;/p&gt;

&lt;p&gt;We also shouldn’t pretend that a 100% solution is ever readily available. It’s difficult to know the
needs of everyone because the most relevant solutions will always focus on the needs of the majority
of affected populations. No one can ever come out and say, “okay, I’ve solved X hard problem,” because
they’ve certainly failed to consider an intersectionality&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;intersectionality&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;intersectionality&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Intersectionality&quot;&gt;Intersectionality&lt;/a&gt; is the
idea that some issues faced by an individual are formed by a combination of identities rather than
a single one. For example, some issues faced a black woman are because they are black &lt;em&gt;and&lt;/em&gt; a woman,
rather than because they or black or a woman.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Because of intersectionalities, the 90% solution may be orthogonal to solutions for the other 10%.
As an example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consider ten people sleeping in a room. The room gets very hot, so one person turns on the cooler.
But one person in the room is sleeping below the AC vent, and wakes up sick the next day. Despite
the person being hot, simply turning on the AC did not fix all of their problems; the best solution
for them is to move away from the vent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s pivotal that milestones don’t regress on the status quo. Of course, this itself is a hard problem.&lt;/p&gt;

&lt;h2 id=&quot;on-the-big-picture&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-the-big-picture&quot;&gt;&lt;/a&gt;On the big picture&lt;/h2&gt;

&lt;p&gt;It’s always important to step back and look at the big picture&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;big-picture&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;big-picture&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This is a vague term; for me the big picture is
every level above the one currently being looked from.&lt;/span&gt;. There are at least two reasons for this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It forces one to consider the goal in the context of an environment with more stakeholders. As an
example related to the previous section, maybe the problem can’t be wholly solved right now, but
getting a smaller win proves progress is being made, raising interest and laying the foundation
for future work.&lt;/li&gt;
  &lt;li&gt;Not everyone in the picture is aligned with your goals; maybe not even those you collaborate with.
Failing to recognize the motivations of others is dangerous because it pushes you further out of
understanding the context you are working in, and makes it more difficult to react to unexpected
events. Taking help and trusting others is pivotal to achieving your goals, but such trust can’t
be ignorant.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;on-research&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-research&quot;&gt;&lt;/a&gt;On research&lt;/h2&gt;

&lt;p&gt;Today, most answers to questions are designed to get the reader to take a specific perspective (this
post is no different). So how do you find a definitive answer to something? In some sense, you
can’t – at most, you can take samples of a number of different answers and aggregate them into
your own understanding.&lt;/p&gt;

&lt;p&gt;Trust is difficult. Bill Gates found it difficult, so he started his own foundation instead of
donating all his money to existing funds. So before you convince yourself you understand something,
make sure you do research and are confident in your interpretation.&lt;/p&gt;

&lt;h2 id=&quot;on-nomenclature&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-nomenclature&quot;&gt;&lt;/a&gt;On nomenclature&lt;/h2&gt;

&lt;p&gt;The canonical usage of “problematic” is dangerous. Without a description of why something is
“problematic”, saying something is “problematic” is equivalent to saying, “this statement says
something bad, but I’m not going to tell you what it is or why it’s bad”. In that context,
everything can be described as “problematic”, which is useless.&lt;/p&gt;

&lt;p&gt;To me, it is much more useful to describe an idea as dangerous, and explain why it is so.&lt;/p&gt;
</description>
				<pubDate>Sat, 16 May 2020 03:00:00 -0500</pubDate>
				<link>https://ayazhafiz.com/articles/20/on-understanding</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/20/on-understanding</guid>
			</item>
		
			<item>
				<title>beauty</title>
				<description>&lt;p&gt;There’s this great quote from one of Zhu’s songs&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;cocaine-model&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cocaine-model&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://youtu.be/Skt_NKI4d6U?t=20&quot;&gt;Cocaine Model&lt;/a&gt;&lt;/span&gt; that has long influenced me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I was seven, my father said, “Fashion fades, but beauty is eternal. Elegance is illumination.
Blue is a language. Love and obsession is separated by a thin line, and that line is infatuation.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s broadly characterize human beauty as either normative or personal. Normative beauty attempts
to please the norm (of which there may be several), while personal beauty attempts to please the
self (of which there may be a few, but certainly not many). Normative beauty and personal beauty
don’t have to be disjoint, and both can be influenced environmentally. But personal beauty, when
realized, is always elegant to the self; unfortunately, the same cannot be said for normative
beauty&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;touch-beauty&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;touch-beauty&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;For example, consider the disparity between what is beautiful to
the eye and what is beautiful to the touch.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Understanding how an individual differentiates things like this has a tremendous influence on their
relationships. Whereas obsession decays into a desire to appease an individual’s perceived needs,
love is characterized by an understanding of their needs. These states are distinct, but may be
subtle; perhaps that subtly is infatuation.&lt;/p&gt;
</description>
				<pubDate>Thu, 16 Apr 2020 03:00:00 -0500</pubDate>
				<link>https://ayazhafiz.com/articles/20/beauty</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/20/beauty</guid>
			</item>
		
			<item>
				<title>scaling up</title>
				<description>&lt;p&gt;There’s this not-so-novel idea that a businesses will often find success by focusing on inputs
rather than outputs. The reasoning is that outputs are affected by many more externalities
that inputs, and that a strong application of a business’s inputs will naturally lead to
desired outputs. For example, a salesperson may wish to focus more on the number of meetings they
set up rather than their conversion rate&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;number-meetings&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;number-meetings&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The latter is less
deterministic than the former, and finding success in the former will lead to a larger number of
conversions anyway.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;But business must consider a number of other strategies, including how to scale up.
Observing the current&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;current&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;current&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;At the time of this writing&lt;/span&gt; COVID-19 pandemic, I
have become convinced that effective scaling is a pivotal consideration for all organizations, not
just businesses, and will play a tremendous role in the pandemic’s impact on human livelihoods. I’ll
give just three examples (you could find many more!):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Insurance premiums will soar after (and possibly during) this pandemic. Part of this will be
because a lot of people will get sick and insurance companies need to maintain short-term
profitability. Part of this is that insurance companies, like many nations’ healthcare systems,
are unprepared to scale for catastrophe.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As the pandemic begins to stabilize, many individuals will need convenient, flexible
sources of income. Businesses in the gig economy, like rideshare and delivery apps, will be
stressed to intake a tremendous userbase without meticulous foresight.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I planned to immigrate to Switzerland in May, prior to the nation’s suspension of work visas.
Due to an increased backlog and higher workload, Swiss consulates estimate the processing time of
a visa to increase to over a month&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;month&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;month&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\sim4\text{x}&lt;/script&gt;&lt;/span&gt; the regular
processing time&lt;/span&gt; after the suspension is lifted. Could this timeline
be improved with a buffer, like delaying the start date of an issued visa?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I anticipate that we will think about scale much more as COVID rages on, and that scaling solutions
will resurge as a &lt;a href=&quot;/articles/20/satellites#4--fact&quot;&gt;fact&lt;/a&gt; in a post-COVID world. Part of the
difficulty with scaling is that it is not cheap, and without an expectation for long-term need,
arguments for scalability are dulled. It will be interesting to see how these challenges are solved.
My bet is on an economy of platforms and services.&lt;/p&gt;

&lt;h2 id=&quot;bring-it-back&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#bring-it-back&quot;&gt;&lt;/a&gt;bring it back&lt;/h2&gt;

&lt;p&gt;Generalizing&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;generalization&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;generalization&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Pun intended :slightly_smiling_face:&lt;/span&gt; the idea of
“scaling up”, one can thinking about going from a specialization to a generalization. Scale in this
sense can be very individual – it’s one thing to understand how much salt a scrambled egg requires,
it’s another to understand the same for an arbitrary dish.&lt;/p&gt;
</description>
				<pubDate>Sun, 29 Mar 2020 03:00:00 -0500</pubDate>
				<link>https://ayazhafiz.com/articles/20/scaling-up</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/20/scaling-up</guid>
			</item>
		
			<item>
				<title>satellites</title>
				<description>&lt;p&gt;At some point, all fads were satellite ideas pursued by one more independent groups. As a fad grows,
so does the size and number of groups associated with it. Eventually a fad achieves a non-trivial
adoption rate (becomes a fact) or fades away (becomes an artifact).&lt;/p&gt;

&lt;p&gt;The relationships of groups pursuing an idea at all of these stages is well studied, especially
&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S2212827114003709&quot;&gt;with&lt;/a&gt; &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0956522104000272&quot;&gt;respect&lt;/a&gt;
&lt;a href=&quot;https://academic.oup.com/isr/article-abstract/11/3/523/1796789?redirectedFrom=fulltext&quot;&gt;to&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Complexity_of_Cooperation&quot;&gt;collaboration and competition&lt;/a&gt;&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;four-links&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;four-links&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;These are four separate links :slightly_smiling_face:&lt;/span&gt;.
In this cc, I wish to briefly discuss the consequences of each of these stages on individual
productivity and efficiency. Let’s start from the back.&lt;/p&gt;

&lt;h2 id=&quot;4--fact&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#4--fact&quot;&gt;&lt;/a&gt;&lt;span class=&quot;el&quot;&gt;4:&lt;/span&gt;  Fact&lt;/h2&gt;

&lt;p&gt;Intuition might suggest that productivity is lowered significant after a fad becomes a fact. But
while there may not be a lot of effort required in growing the fact to a greater level of adoption,
maintenance is non-trivial. For example, the upfront cost of building a new house is high, but this
cost is marginal relative to the maintenance costs required over the better part of the next
century&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;maintenance&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;maintenance&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Maintenance requires both individual contribution (time) and
transient contributions (e.g. via money paid for services) of productivity.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;An individual may expect a consistent maintenance cost associated with a fact. This cost is likely
to be small compared to an individual’s other responsibilities, and an increase in maintenance costs
incites an individual to develop optimizations&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;maintenance-cost&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;maintenance-cost&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;E.g. a system
that requires a lot of manual tuning is likely to be superseded.&lt;/span&gt; (read: new satellite ideas).
This can lead to a cycle of individual effort invested in an idea.&lt;/p&gt;

&lt;h2 id=&quot;3--artifact&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#3--artifact&quot;&gt;&lt;/a&gt;&lt;span class=&quot;el&quot;&gt;3:&lt;/span&gt;  Artifact&lt;/h2&gt;

&lt;p&gt;When a fad becomes an artifact, an individual has two choices:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Invest more time in the artifact. This boosts individual productivity, but is
inefficient when the fad has been shown to be flawed. For example, &lt;a href=&quot;http://nlp.seas.harvard.edu/NamedTensor.html&quot;&gt;untyped tensors&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pivot to another idea. This may lead to a loss of productivity in the short term due to ramp-up
investment, but increases efficiency in the long term.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aside these considerations, the productivity invested in an artifact is very similar to that of a
fact.&lt;/p&gt;

&lt;h2 id=&quot;2--fad&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2--fad&quot;&gt;&lt;/a&gt;&lt;span class=&quot;el&quot;&gt;2:&lt;/span&gt;  Fad&lt;/h2&gt;

&lt;p&gt;Okay, so here’s where it gets interesting. I’m not convinced that being involved with a fad is
productive.&lt;/p&gt;

&lt;p&gt;What’s the hot thing right now? Whatever it is, I’m sure there are a lot of people working on it.
Realistically, if any one individual working on that fad ceased their contribution immediately,
whatever they could have discovered would be independently discovered in the next &lt;a href=&quot;https://en.wikipedia.org/wiki/15_minutes_of_fame&quot;&gt;15 minutes of
fame&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong – 10% contributions add up. But for the individual, 10% isn’t always enough.
This seems like a degradation in individual efficiency.&lt;/p&gt;

&lt;h2 id=&quot;1--satellite&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1--satellite&quot;&gt;&lt;/a&gt;&lt;span class=&quot;el&quot;&gt;1:&lt;/span&gt;  Satellite&lt;/h2&gt;

&lt;p&gt;Naturally, satellite ideas require a large efficiency investment. Whether this translates to
heightened productivity is largely dependent on personal motivation.&lt;/p&gt;

&lt;p&gt;Satellites are lonely. Work on divergent ideas must be self-motivated, as invested dependents
are often lacking. When a road map is unclear (as is often the case for satellite ideas), it can be
difficult to convince oneself to be going. So a satellite must be really into it.&lt;/p&gt;

&lt;p&gt;I feel that this facet is often overlooked. Revolutionary ideas are good ideas, and they are also
incredibly unique and obsessively pursued. In fact, uniqueness and investment are the primary
factors that can promote a satellite into a fad. The soundness of an idea becomes more important
only later on.&lt;/p&gt;
</description>
				<pubDate>Sat, 29 Feb 2020 02:00:00 -0600</pubDate>
				<link>https://ayazhafiz.com/articles/20/satellites</link>
				<guid isPermaLink="true">https://ayazhafiz.com/articles/20/satellites</guid>
			</item>
		
	</channel>
</rss>
