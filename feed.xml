<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ayazhafiz.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ayazhafiz.com/" rel="alternate" type="text/html" /><updated>2020-12-30T13:29:43-06:00</updated><id>https://ayazhafiz.com/feed.xml</id><title type="html">Ayaz Hafiz</title><subtitle>Hafiz's public website.</subtitle><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><entry><title type="html">pattern matching with a typechecker</title><link href="https://ayazhafiz.com/articles/20/pattern-matching-with-a-typechecker" rel="alternate" type="text/html" title="pattern matching with a typechecker" /><published>2020-12-27T02:00:00-06:00</published><updated>2020-12-27T02:00:00-06:00</updated><id>https://ayazhafiz.com/articles/20/pattern-matching-with-a-typechecker</id><content type="html" xml:base="https://ayazhafiz.com/articles/20/pattern-matching-with-a-typechecker">&lt;p&gt;I’ve been doing the 2015 Advent of Code puzzles, and today I came across &lt;a href=&quot;https://adventofcode.com/2015/day/16&quot;&gt;Day 16 - Aunt Sue&lt;/a&gt;.
The premise of the problem is you have a bunch of aunts named Sue, each of which
you know some facts about, and you are searching for the aunt that matches a
set of predetermined facts. The second part of the problem adds additional
constraints that make the fact matching conditional rather than singleton.&lt;/p&gt;

&lt;p&gt;This is a pretty simple pattern matching problem. While I was thinking about
about it, I realized that it could be solved entirely within TypeScript’s type
system!&lt;/p&gt;

&lt;p&gt;In this cc, we will cover how to do so - part 1 is pretty
straightforward, part 2 requires some construction and is more
interesting. The article will not attempt to assume you are previously familiar
with TypeScript’s type system, introducing semantics where needed. Understanding
of subtyping is assumed.&lt;/p&gt;

&lt;p&gt;The basis for this construction is TypeScript’s treatment of
primitive literals as subtypes of their primitive type (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;1 &amp;lt;: number&lt;/code&gt;), a
feature I am not aware any other mainstream programming languages have&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;number&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;number&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This feature is not strictly needed (i.e. you could form a
similar construction in other languages by creating fresh types for the natural
numbers), but it makes application of the approach much easier.&lt;/span&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prelude&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#prelude&quot;&gt;#&lt;/a&gt;Prelude&lt;/h3&gt;

&lt;p&gt;As a quick note on notation, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;S &amp;lt;: T&lt;/code&gt; to mean &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;
is a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S &amp;lt;/: T&lt;/code&gt; to mean &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is not a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;TypeScript union types are of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;T|U&lt;/code&gt; and are inhabited by values that
have type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt;. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;number|string&lt;/code&gt; is inhabited by all string
and numbers. Clearly, &lt;code class=&quot;highlighter-rouge&quot;&gt;T &amp;lt;: T|U, U &amp;lt;: T|U&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;T|U &amp;lt;/: T&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;T|U &amp;lt;/: U&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;TypeScript intersection types are of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;T&amp;amp;U&lt;/code&gt; and are inhabited by values that
have type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt;. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;{a: number}&amp;amp;{b: number}&lt;/code&gt; is inhabited by
all records with fields &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, each of which is a &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;T&amp;amp;U &amp;lt;: T, T&amp;amp;U &amp;lt;: U&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;T &amp;lt;/: T&amp;amp;U&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;U &amp;lt;/: T&amp;amp;U&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;part-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#part-1&quot;&gt;#&lt;/a&gt;Part 1&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you would like to follow along with this solution, I have provided a
&lt;a href=&quot;https://www.typescriptlang.org/play?#code/C4TwDgpgBAKgFhAygV2gXigbwFBSgYzgEsAbAEwCcIA7ALigGYAaXAgQ2AGd6B2FvTmwC2AexAQy3KACZ+UMCKEQKbakVVTmrNgGsiwNlIAMcgG5EAXpxKH6J1gHMR5AGZFOcegFY5wKhE05fDYKKVlWSAoXZCUpAEYWAF8AbmxsUEgoFACAdX04ADlhAKgMHDwoAG1EKCJqKB0IEBEXLNROAF16TGpi+kREgDJszmqO1JT08GgAQRISeCR20rbc-KLYysbm1pG84ELiztSM6ABZDkI6h2yVgFEADz82fGAAHjmFhBGmKAAFELAdQkN6LbIAPnBlQA5L0lNDxmlTqtOCtylA4t0nK53J4oABOZLsUJ2ImCUTiST0fGTPDSbqRaKxbxEvwQAL0AAcROxZDcHi5tMYDMUylU6moYSJun0tgxrP8Ui8QoALFjnHzcfQ4kZpXoDFL5MomRyCUKvN1giSoF4iYyYqaAGx62VSGmpPCO9U4gUY3XsLjUolWqScoU8bps03SMnCMQSKQ8Hka-l4nVCzmWkKhu3Gh1SZ1QXmp7VC-FZwNQFV20UqNQaUlQKPGIU6yOK+gxgjEchUOh+2MUhPaoytzFYGUGke5qL5+jVqDmKw2eKt+kT-VyuIK9nGZM+vEMVsMBl55lQQvFrUD4mh1tqrDBSvcqCTuW2xeWaxy0cejEWx9sy5HdTQYQd4ypG1Wy9LAl2-Atgw4BD5FrcUGz9VsIw3V16ELJ9DXtc93VYOJM0fHtKBoIMixTa8uzfeJfxI8ssGbegwKNWdz39K9fUdIVpCMbo4JXdiXSnKB-TYjEBPHTARLlDiQ14cTFIE9dMEI00k27UhKP7bcUKUOsJUTAST1Yjsb2UglVMYgSH0wBiWRog9cKJBSCwEgDMHJCDNBAnNP2Xd8BJg+Sv1Eqsa2MtDJU7QLSz-aQsMwGzCVczVfS7aSVQEsiIpC5DeLTf0tLM5KWMK+D3KMsV63ixg7NwoUGCEyzd0bPzKSVZqzT-Bg5M87UZxNPcmys-iBo0mydOG+VdN7KiMIGizqqiwybMM8reFaxz5oy6SdT64i8AYHznKa4KaptRDrXTAbwvwsTFv06juuHRhWtS+aPwUWKGsTO6vIGgqtv9S6P3msMBqqyHEts16+07VV2vWn9EMrHTLqYvAVTk9KEeOzixsFP8VQ0y6F2krsSvY1U1rphbnoWy6YdYFVHKZl9Loy+a8vJnydqupnqas3Gq3C6SdOFwzudVVL-vq0zp1vFSJs6mRVQKmm+s2oCq1VKqmb+s9tL69m8C8NHeY8yK5UOqzpHNAmDf9D7IP9aHzQ06SyrN5ClZM9CBdYLw1vm-XK0LS6jz-LxHI9oLLsM-nzR8pnieFrsg7i+z46lqyMuFjiTfNVLY9GudJMxsJzQK4WF354GybD43aN9HSriW-s-tQwHW89NGtqJqvzwe1hHTk3LwJ6+cW4vIVHUpzdGIRrt5qmyfGY7w8x-N66Nolx1HNzgfbqR5biZs4+fMj-0bJfEul6eijkYv5vX1Xkcl9S7u3ovPvIGasvp-kdAVbmC88JvyvkvKqv0gEvXSuGNGTMH5IVqsLCWPBp5O1np9JSBs4jhhmhgq6bM7ZFV2n+Hga1K6HzlLTXeLUaGn37irG8SdqIs0tlAHgd97bANmnrbBr89Lv0IdHShN046sB4KlJmMt2HoWJn7cMBUDrBhgf2HSR1sFVWkoWM+HCXxcJkn+TkaMEGX37EY5RjVlQWNdtaPmgjqK8wzBpeahDrQ82-uY1gnII5uOihraMtckqBMcv-CRfUvYhOIRYnyLNCzWMus7CxT0DYcUujpeWFjUpmJfN4-cWU8S8M5BokJC4YnLXQVjDM7c3KI2MSo92cY56STLGjQxfUfEVVYPiOSZicn+JlgHH+f58SkOtEogGHDVFOzLGtMxm1tFIOyWWROHTPp+Jwnw6RUUJb4gzswg5NiEogK3ngfEWTrQcWFhlFOxyK7+IyuDQ5W5jk6ysguSBdVg6NR4GWKqZi7HzPQvEqhfDWxGBtmMxBUBikhNkXgHUzjeok2roZNRf4dQr32eC5WbSEYSx1GtaSDyJkXxZqdP0XMzlZ2pXsiSZKjCnOaakkJH4aawvCq0xqGVVn+y4qaCeaKjB-wNsi6FC50mwrBmQniZzdHi1hVVGyDz7HIV5XitsWBG6lJLBfZ5Y4MUvUNQCvO84xykMrEw5pxMcZjjWiza+6ya5hNXHqxyzzPkBUysaslcQfIjKNdeLl0LEkkTiHcgNwseWTTHK8-ZQqdmQRfPkmNDdtUuVllJKy0a0VxCaWUzB1KlIeqLRiQS7ZNZrPEctLVELGrXJrXJXJC9iYHTXL7X5Ft8GQXFTW11ZCanSv9dSNc0SiEPyraStcHKy0XwFZi3VJFpDhUzpOpFIi1w-WqQvJ5-jq1xGkBAs5T8K1HrXKW41xdc0tOpaetqdaxU7uLhW48BMPWFmkjKm6vC4gMBmfEHdlbG06OPKO2ZWjIMjSxeeNtwHHL-vA4OuueLzoVjdIihcq7qEkQYPy6lEN-EAaishhgCizmJs1lCm6wKsM-PrYirs4NjygvTUFf5uKSIqisQkkVpNEZoPvHJYWXcDbvLIY4-jfbNZdjMext294YNgcQ++r++zT2c2EiEmTsGrXn2HXEFUQtH1Ke4+rWpUG8UqnCpvI94bO73lSrrBhGnaX3gbtSx2mt8OPrk2ilUXGhwZrgz3BDPa8XWxwy9DzadYtyUUSIhGqL-waUtfNKT1pQ5ovDiKFtUg5X+IY1FDLIbtnhaColoTrYvACOhVJrGMViUOIa1uxlZVH2pwSQ1qV1ojHUtVZrOlIaWOmg-GYjKTNKteCqgR0Jl1I2AegqglVkWAH1JbHiqe+noUfhxhhlGe2CUSRqR68rak9srOszIRFyrmnjZPlmFxO6WVymQ46UN93XHQs-aKpU0E415sfQuIp0FBtr00wGsF0Ec3FeAoG68-nTQvfgSE7G-iOJmPyxiHgw8yEOuXddkrmEJPXpR76a+ZDKs8A0ql7TEk8KqbxbQt7uHqd4mx-s4LBOGWcoiZ6727OhYjeF7T+6ZKeDhRmzuwLSOVokXkaeIHjY-Zdpl1U6F0D4PnNWZhTH0KXy2dqnxtFljOfRZCX+wtrZORDSE4i-pkTLcKdNKYv7C8mMkSCdbwBnnLmSYd6hqy03vfM5-A75JE7ufI9yg7uX93LyMvXg7xWz7159V95bgqZiPw2WG+rrWeLORhf8sjubiL+clvhfslTlZDKG7xUMt9mKU4uZ562aZB2ZGkrwz39TFrqWlf2ZV-Ep9R8fa2+-fHJams3Wb-d13i9W+g5XdS1bUUMnMQPSbgdAYQbMUVe9qPBFH254xPiDVZDj2Eq1wJOFfej5tcBYaJmdLBJO4Byd5bOOn9zt3xhcN4QkJZBI1pZZZ8m091kojAw8Asd1ecJIv92V29kdHku0n8ushcvUXJH4n8U0JIOJoYEZeFBIdcbp8MJdz9JlWBBJb8z9JMu8p1kp9V0ZDQWZ6IT1wC4gO0T10sF5d86Qz1vRl06NTQydCMRC6EcdEU+tDtZIp8S9m12tkIb5ZIl1jUo4udNVZIcDl0H0ldCwzFeDodzc8FYdTt6DSIX9FIWDd1aCoI2Db9KxAcRNctgdkpa0DUgsFdhd+dpBpBcF6Mc8HDh0gigDODskd1AjpAd5mkqUS9kC5R8cgjqtK8HsQEm4sd1IfJpJC83ZHt1JC5FNwjhNq420gjzDHDpJ78Wd1IL1HUC160KjuJ1INUPUdI8cHCqjX1YIDN5DoCDJwDBo7Datw8TpzIoiXJP8iZzJgloUOIPMzd+p6CGAMjOkr0S8ds7BzJxcS8cili+pAjiMis1CXISknCv9qN4sFppZYjzIwYPVCjKwId7tTiDErJRkG9eiHINtntR4rCAk6R8YA8c5es-9hCZAKZuh0lBDsiHJFiboY5-ErMatpCYSEDJCa8fcHItDrwmUS8oYQlyCHM4SytHssDkoVRCl7tM0zl0EhsHJfMdjhjVY9EHJFst8TiAjvJBNms+px1KxAivBhl7sx8JIcUrJyCvAstmU39rUaUiFvJZCdMWjTRhTNBvJlCRNG8P8zkv9GsA8xZWMnC0ivBk8MTRNGSpjkovB98bp3Dq4SdjVoTpAvBWSRN9Yz8W96CFt0DPU0E-8MtN00ZmCQE5ZGSwpzVPUCi-jkpl4KT9k5oUVFTz5AjHQKVC10N49QF6DXtsIJJUzZV2SulEzftrSJDxoqYwoSMS9ZtDSF5yDHQajxkS8s5H0WzT8ayEVgS0jHRFtH0mSud80BJCduhhV5CRzWD6CcFkyJJQCD8j9vBxyZirpVi01rSIiOcDVqUVNpcHDyCeAZ17kyyiTvTwD+E7j6jgC8Dyy5zwoVsyylyl9xzFZH07dWiQzxyez1Z815jkoeBGDA4uz09kordfClcZNKw2jtJ8of8l8ntDD0yOFAjOR5TDi-9PDZy6R-dAIz8nN7z0LTzgEjoFd8pKzMi-luthc0jOQrTMiyN9lLt9d0L3MczgTS5ut8pEcLibx6EbJ3Ty9Ay5l+KaLmiBJ8Q0YpzgSZy1i6Q28iyMZjMOESyqCpK7VDRSC8zAj8RkTKNUL0JnT2jKpfV-FWcjNfopKCTfRmKUDhdwDbkxDtCB8rkpLM8S9WdnwjLW0pLFVYLei2MpKQL54nDl9tyJY2oASUKoAwU+SBojBYypDzkLdGAjBGcmy4r7sG0os19WA2ph9A8IzIdErsSeMsrNzWo0C9y2SQEPxRZqqslKxV91Koor82oPyldqCvKhDqq-zEZny8z8c2ohyldXzX88zh1Bph4rs6Kc9Wo+DLQq17K5QKNGFFqZoXiF4UqRrgM1dLyESls6VBpNiCEHCcoi5FrY9rR9SwcldprY07iiV39aoqqBo4gpV7VczZZFqCpO8uKd1HrQrzksEF1poYrjUTCU9fLydpoQjwk8y9c8qoqgiXLrwNTDQ2ZWp4jzjXqsj5cg8QTGBpByqwqmYXqlS20QN8jLCltuLHUcb6yRMJLl0vypscaiD7CQFTdiccaArkJ5pVrMMCrpBuSVDyi+lWp+jMBq8ibDIVtpbKcsL7yozml+cGAQN0bO4P09ZpbXUPVebfEEYRqNiA8FCUTwaCrsMsAmYDysaT1paDDjUjt-FqzcLGBbiCLMUiKKbpaBb3E5C8yTqGA4Yg6uCyyOqBNta8QesldtiRMTqwSOocTVKVEHCNbYTbbaL7ySDqk9pR0Wq-9cqAFqa9NaqRMIM8r3jrToSNjklf1s8pq9pSjEb6aM69ouaYcctAKCqVQvTq5JTGEkC9pxaRMGTEjHiBo4sU6StYaXJTVp7laRNCiz80rzp1zkaAEXxOTp67trSUjBb87p7okPVGzml2yV7WpjTZ6ENLUtpr7GLOltpp807GpeFzoOLNY8kc7nVp7-qBCibLKBkzoAyBjji8yd7flWpHR68pSUrLrNYMtiNxTrTKaTNijHoNIw1IyrazoszxjGxjqhSYHdTq4jD+L1q3QYHF92qF4erLyYGN92kqzyiYG-4PUjibpXaWKYH89I9stbcYGx7q5V657sqqzvo4Hub5oc5n1vpYzebWsLlnCCqGdCGn0S9uD1Tvpszvy36uc5tvpT79dx1DzgS67rzyJ9duiPjHLvonyeC-8STFCBpVds7mkoGkGXdvomjl1u0wDgq3GvizSe6DGbVQYZL6Tcz10zpHcY7g9qUI9rSTqMK7i86o1hbVzQYiqf71aLZWpOQTG8rU9mje64nY9vqnDoaD7CmN93VTGLrCmvrxoE07SCrKk8alTD6uo-tCmQnU7bYiaP7pKA9MbVZHlWolK0o79JbgTpre9vaXoiKWZkH9KNGLzB6O7YYyHzwh6YdYnGATkumMz6GfHYZ+VH1-tuG+o678QajiZeMllYYB7zwu4z6HCTqb8FyvsQCHCr8BNIbUcqSQFoSBMf1GmibxnS8OYMqfnxHH557DZyYjADK1rEU8n-HUZBd-GWHMi2qbtYWLpAGiLhY20BNLn46gqVz8y8ZJUEmsjP5clUYBrNnx4UqMsBNjdGMkWGHB7VR2DRYkCEZ+d8ZFG3LGryZRClnHC2mib8d8Y0WA1O0JHMjyWzNAy4L1DZ0BWLNuqgSyWBX6mtXap5UpXPKRMammK4kBXnj9cX6GzwMBW71gXVXOkkjx7VQfDZazkzHu7cjyZgjJz7sCWhE+bA2PcNN-ksEvWiqPWXT0svWzrIJt8VLFbA3abvGnDMXtCvWN80cNMY3A2ur+K502LEVeEKYBqTXA9ViFWxb4X-yrnhdyWZaUkgSNDyYxjrG8rPtMVJmu3MKV60t7y6UVRNbG3QkAKiaAWzbb6NyVq-8FWbaODZizltHFyGYn7zr7z7aWEOYva0oPmnC47+LOWGBXmxUsmsjZoGYRH2W-9USdHyZo7wGkKm7saX3l7q4+3g9L9VQs6Znjbc6EyOZx3zaM6p6wP9oQkN2vkl2APaHh7wqa2x3yTlKA0dLM4APHS6HwmL5d6wOA7irn0y2SmAOBnojrQGrL1VQZ7MBNckafzBZv3uJmzymqw5TJ3TTPdEUx3CsPH-GMW+pyWE4NHV8HXLW6PM2tMVXM4JZzNt3IIuGd8b1BYLXsUyOAFpTNZK3PSDrq4UrDM7xBZXDxpVjRtQJVRYGNGtTy0tHrOEaA1VixHB5JZMqL7hWVHRWCGZWeHiDtmOZCzV3PUltXOHy8YfsGX9nGwWYfON93aFo-byZWyDOH37yjbvUgvL3xHBK2cgvuWKsfckXq1aTwys8Z2CnyZ5zBPtC8Xn7T38bRX1HauI03Ki2OZdyfX8moWyzmvSLlmsdpyFYkO10i4jyFZHHfimOVGAX3HfJ7sa3togsFZJsDTASoWFZ72tMi9PntZwzH143zxEux34nAIi6T2PttYstetr2vGObyZ8Luu2aR3s5tYZ1Aq8ytP35TuG7IW-VhntZHM0zg7zyFPOQOH9clGj7MntYBqenOEPjtZCuHYRPwKOZRm32op-Otw+ujZEKooJ7l0junQjZI2XpVkkXyX1mMObdDtmyjZzKWKzmiax3jmsfcenC7qYW8ZnL53Q2F6LKjYu6E86at8jYAGdMgS8cjYQbr2XGZFzRn9zv1vYrVj2YUggA&quot;&gt;TypeScript playground&lt;/a&gt; with all the code. To see what types have been
instantiated, simply hover over their name; for example, hovering on &lt;code class=&quot;highlighter-rouge&quot;&gt;MatchingSue&lt;/code&gt;
should yield &lt;code class=&quot;highlighter-rouge&quot;&gt;40&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the full problem statement, please refer to the AoC (not &lt;a href=&quot;https://en.wikipedia.org/wiki/Alexandria_Ocasio-Cortez&quot;&gt;AOC&lt;/a&gt;)
link above. In short, we have a list of facts about the exact aunt Sue we are
looking for, which we can express a record type:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pomeranians&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;akitas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vizslas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Observe that in &lt;code class=&quot;highlighter-rouge&quot;&gt;children: 3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; is a type, not a value.
It is a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; inhabited by exactly one value, namely the number &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also have a bunch of candidate aunt Sues, each of which we know a subset of facts about.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pomeranians&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;akitas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;akitas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;akitas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;/// 495 more Sues&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The record of facts for each aunt Sue is indexed by a numeric reference (Sue 1,
Sue 2), etc. Observe that the fields of facts known for each Sue is a subset of
facts we know about the &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;. Only one of these candidates’ facts exactly
match the corresponding facts associated with &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that not every Sue is a supertype of &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;; for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sues[1]&lt;/code&gt;,
which has type &lt;code class=&quot;highlighter-rouge&quot;&gt;{goldfish: 9, cars: 0, samoyeds: 9}&lt;/code&gt;, is not a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;
because (for one) &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue['goldfish'] = 5 &amp;lt;/: 9 = Sues[1]['goldfish']&lt;/code&gt;. Remember, the number literals are types in themselves!&lt;/p&gt;

&lt;p&gt;Here’s how we’re going to do this pattern matching: if there is an Sue
that matches &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, their facts will be a supertype of &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, or said
another way, their facts will be a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; with respect to only those
facts (in fact, when only common fields are considered the types must be equal).
So, for each Sue &lt;code class=&quot;highlighter-rouge&quot;&gt;CandSue&lt;/code&gt;, we’re going to “pick out” fields from &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; just
enough to match the fields of &lt;code class=&quot;highlighter-rouge&quot;&gt;CandSue&lt;/code&gt;, producing a new type &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSueMatcher&lt;/code&gt;.
Then, we check the subtype relation &lt;code class=&quot;highlighter-rouge&quot;&gt;CandSue &amp;lt;: TheSueMatcher&lt;/code&gt;, and if it holds,
&lt;code class=&quot;highlighter-rouge&quot;&gt;CandSue&lt;/code&gt; is the Sue we seek.&lt;/p&gt;

&lt;p&gt;What does this subtype check look like? Thanks to TypeScript’s optional field
syntax, wherein &lt;code class=&quot;highlighter-rouge&quot;&gt;{a?: number}&lt;/code&gt; means “a record with field &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; of type string, or
no field &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; at all”, we can write a &lt;code class=&quot;highlighter-rouge&quot;&gt;Partial&lt;/code&gt; type constructor&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;partial&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;partial&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Partial&lt;/code&gt; is generally provided directly by the TypeScript standard library.&lt;/span&gt; that given a
record type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;, will yield a supertype of &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; where all fields are optional:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// yields {noise?: string}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[F in keyof T]?: T[F]&lt;/code&gt; is a mapped type that means “for every key &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; of
(the record type) &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;, make it an optional field whose value pair has the same
type the value pair corresponding to &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; had in &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;”.&lt;/p&gt;

&lt;p&gt;Now, we can check if a candidate Sue is the one that we are looking for by
checking whether it is a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;Partial&amp;lt;TheSue&amp;gt;&lt;/code&gt;. For example, we will have
that&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{trees: 9, cars: 4} &amp;lt;: Partial&amp;lt;{trees: 9, cars: 4, akitas: 2}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;because
all fields of the subtype match the fields of the supertype, and the
unmatched fields of the supertype (namely &lt;code class=&quot;highlighter-rouge&quot;&gt;akitas&lt;/code&gt;) are optional, so they do not have to be
present in the subtype&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;type&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;type&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Notice that it is also the case that &lt;code class=&quot;highlighter-rouge&quot;&gt;Partial&amp;lt;{trees: 9, cars: 4, akitas: 2}&amp;gt; &amp;lt;: {trees: 9, cars: 4}&lt;/code&gt;.
What does this say about the set properties of the TypeScript type system?&lt;/span&gt;. Moreover&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;trees&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;trees&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;A natural question is,
why is &lt;code class=&quot;highlighter-rouge&quot;&gt;trees&lt;/code&gt; not completely elided during the subtype comparison, forcing
&lt;code class=&quot;highlighter-rouge&quot;&gt;{trees: 1} &amp;lt;: {}&lt;/code&gt;? The reason is that the optional syntax (&lt;a href=&quot;https://github.com/ayazhafiz/rats#lossy-type-downcasting&quot;&gt;tries to be&lt;/a&gt;)
structure preserving; informally, the checking algorithm for &lt;code class=&quot;highlighter-rouge&quot;&gt;{a?: T}&lt;/code&gt; is “if
&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is not present, OK; else the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; present must match &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;”. Note that
this is distinct from &lt;code class=&quot;highlighter-rouge&quot;&gt;{a: T|undefined}&lt;/code&gt;, which has no type relationship with &lt;code class=&quot;highlighter-rouge&quot;&gt;{a?: T}&lt;/code&gt;.&lt;/span&gt;,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{trees: 1, cars: 4} &amp;lt;/: Partial&amp;lt;{trees: 9, cars: 4, akitas: 2}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;because&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{trees: 1} &amp;lt;/: {trees?: 9}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To actually check the subtype relation, we can query TypeScript’s typechecker via
&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html#conditional-types&quot;&gt;conditional types&lt;/a&gt;.
The conditional type&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Means if &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is a subtype of (extends) &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; yield &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;; else, yield &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;. For
example:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So for a single Sue, we can define a type constructor&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type IsTheSue&amp;lt;Sue&amp;gt; = Sue extends Partial&amp;lt;TheSue&amp;gt; ? true : false;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;that will yield &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; when passed the Sue we’re looking for.&lt;/p&gt;

&lt;p&gt;But we need a way to perform this check over 500 (!)
candidates, so some control flow or parallel evaluation mechanism is required.
We can get the latter using TypeScript’s &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types&quot;&gt;distributive conditional
types&lt;/a&gt;.
The idea is that when using a union type in a conditional type, the typechecker
will distribute the conditional type over the union’s variants. For example&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;unknownnever&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;unknownnever&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unknown&lt;/code&gt; is TypeScript’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Top_type&quot;&gt;Top type&lt;/a&gt; - the
type inhabited by every value. &lt;code class=&quot;highlighter-rouge&quot;&gt;never&lt;/code&gt; is TypeScript’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Bottom_type&quot;&gt;Bottom type&lt;/a&gt; - the type
inhabited by no value. &lt;code class=&quot;highlighter-rouge&quot;&gt;T|never = T&lt;/code&gt; because nothing can fit in &lt;code class=&quot;highlighter-rouge&quot;&gt;never&lt;/code&gt;, so
the values inhabited in &lt;code class=&quot;highlighter-rouge&quot;&gt;T|never&lt;/code&gt; are only those inhabited in &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;.&lt;/span&gt;,&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PickFieldA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PickFieldA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AFields = (1 | 's') due to the expansion:
    PickFieldA&amp;lt;{a: 1}|{b: 2}|{a: 's'}&amp;gt;
  =   ({a: 1} extends {a: unknown} ? {a: 1}['a'] : never)
    | ({b: 2} extends {a: unknown} ? {b: 2}['a'] : never)
    | ({a: 's'} extends {a: unknown} ? {a: 's'}['a'] : never)
  = 1 | never | 's'
  = 1 | 's'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we just need to feed a union of the 500 Sues into a conditional subtype check
against &lt;code class=&quot;highlighter-rouge&quot;&gt;Partial&amp;lt;TheSue&amp;gt;&lt;/code&gt; (for example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;IsTheSue&lt;/code&gt; constructor above), and
we’ll get the Sue we’re looking for!&lt;/p&gt;

&lt;p&gt;We can extract such a union from our &lt;code class=&quot;highlighter-rouge&quot;&gt;Sues&lt;/code&gt; record type by mapping over all the keys of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Sues&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type SueCandidates = Sues[keyof Sues];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This says “index &lt;code class=&quot;highlighter-rouge&quot;&gt;Sues&lt;/code&gt; by every key of &lt;code class=&quot;highlighter-rouge&quot;&gt;Sues&lt;/code&gt;, and give be back all of those
results”. Clearly, this must be a union type, since we are extracting all of 500
individual types.&lt;/p&gt;

&lt;p&gt;To understand how this works, let’s perform a small expansion. Recall &lt;code class=&quot;highlighter-rouge&quot;&gt;Sues&lt;/code&gt; is
of the form&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;/// 498 more Sues&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sues[keyof Sues]&lt;/code&gt; becomes&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could immediately do &lt;code class=&quot;highlighter-rouge&quot;&gt;IsTheSue&amp;lt;Sues[keyof Sues]&amp;gt;&lt;/code&gt;, but this actually is not
very useful! Thanks to distributive conditional types, &lt;code class=&quot;highlighter-rouge&quot;&gt;IsTheSue&amp;lt;Sues[keyof Sues]&amp;gt;&lt;/code&gt; would yield &lt;code class=&quot;highlighter-rouge&quot;&gt;false | false | ... | true | ... | false =
boolean&lt;/code&gt;, and this gives us no information about who the actual Sue we were
looking for is.&lt;/p&gt;

&lt;p&gt;What we can do is something like this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MatchingSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;MatchingSue&lt;/code&gt; would be a union of all Sues whose fields match corresponding
ones in &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;. To see why, let’s expand this a bit:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;samoyeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perfumes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MatchingSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* some sue that matches */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* some sue that matches */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;never&lt;/code&gt;s all collapse because they cannot be inhabited by a value and hence
do not contribute to the union type; in the end we have just the Sue(s) we’re looking for.&lt;/p&gt;

&lt;p&gt;Well actually, we’re not quite done, because part 1 of the problem asks us for
the index number of the Sue in &lt;code class=&quot;highlighter-rouge&quot;&gt;Sues&lt;/code&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;MatchingSue&lt;/code&gt; corresponds to. I am not aware of a way of
to perform an inverse lookup of a non-primitive type in a record type, so we
can’t find the index of a Sue in &lt;code class=&quot;highlighter-rouge&quot;&gt;Sues&lt;/code&gt; after it’s been extracted.
However, we can propagate the index of each Sue by adding it as an extra
field on the info we know about each Sue before constructing their union and
performing the matching:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesWithNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// produces rows of form &quot;1: {name: 1, cats: 10, goldfish: 5, ...}&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesWithNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesWithNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MatchingSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we have the name of the Sue we were looking for!&lt;/p&gt;

&lt;h2 id=&quot;part-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#part-2&quot;&gt;#&lt;/a&gt;Part 2&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you would like to follow along with this solution, I have provided a
&lt;a href=&quot;https://www.typescriptlang.org/play?ssl=34&amp;amp;ssc=6&amp;amp;pln=34&amp;amp;pc=14#&quot;&gt;TypeScript playground&lt;/a&gt; with all the code. To see what types have been
instantiated, simply hover over their name; for example, hovering on &lt;code class=&quot;highlighter-rouge&quot;&gt;MatchingSue&lt;/code&gt;
should yield &lt;code class=&quot;highlighter-rouge&quot;&gt;241&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hopefully Part 1 gave you a feel for the power and expressiveness of
TypeScript’s type system, and the relative ease by which we can perform
singleton pattern matching with the TypeScript typechecker.&lt;/p&gt;

&lt;p&gt;Part 2 of the problem is a bit more complicated&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;part2&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;part2&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Having built familiarity with the type system and with more work to do in this
part, we will move faster in our constructions.&lt;/span&gt;.
Copying &lt;a href=&quot;https://adventofcode.com/2015/day/16&quot;&gt;the problem statement&lt;/a&gt;
(not visible unless you have correctly answered Part 1):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;cats&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;trees&lt;/code&gt; readings indicates that there are greater than that
many …, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;pomeranians&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;goldfish&lt;/code&gt; readings indicate that there
are fewer than that many …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clearly, we can’t compare singularly-inhabited primitive types anymore, as,
for example, the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;cats&lt;/code&gt; in the Sue we wish to find can be any value
greater than the value inhabited by &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue['cats'] = 7&lt;/code&gt;.
There is no way to formulate a type &lt;code class=&quot;highlighter-rouge&quot;&gt;GT_N &amp;lt;: number&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;GT_N&lt;/code&gt; is inhabited only by &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;s greater than some &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;
– not directly, anyway. Our approach will be to find a way to mark relevant
fields (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;cats&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pomeranians&lt;/code&gt;) in information known about each Sue as
greater or less than the corresponding field in &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, and then perform the
same subtype comparison as we did in Part 1 to find the matching Sue(s).&lt;/p&gt;

&lt;p&gt;First, let’s think about how we could perform greater/less than comparisons in
the type system. In general, this comparison can be done between two integers by
subtracting them and comparing the result to 0. There is no idea of numeric
subtraction in the TypeScript type system itself, so we need to find some
encoding for numbers on which we can perform an operation corresponding to
subtraction.&lt;/p&gt;

&lt;p&gt;With some thought, the most natural idea is to encode natural numbers with
tuples. In TypeScript, a tuple type of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;[T_1, T_2, ..., T_N]&lt;/code&gt; holds &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;
values where the &lt;code class=&quot;highlighter-rouge&quot;&gt;t_i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; value has type &lt;code class=&quot;highlighter-rouge&quot;&gt;T_i&lt;/code&gt;. Each tuple type has a &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt;
property whose type the number of type fields; in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;.
We will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; property to encode natural numbers;
shortly, we will see how to exploit tuples for arithmetic operations.&lt;/p&gt;

&lt;p&gt;To extract the natural number encoded in a tuple’s &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; property, we define
a type constructor:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TupToNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;TupToNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;infer&lt;/code&gt; is arguably the most powerful construct provided by the TypeScript
typechecker; it instructs the typechecker to construct a constraint to resolve
an uninstantiated type (in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;), and to solve the constraint
transparently. The typechecker is basically solving the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; “for us”;
it’s like type reflection inside the type system!
&lt;code class=&quot;highlighter-rouge&quot;&gt;infer&lt;/code&gt; will be our best friend for this part.&lt;/p&gt;

&lt;p&gt;To encode a number in a tuple, we can define a recursive type constructor that
builds up a tuple until its length is that of the number we wish to encode:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tup&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Tup&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [unknown, unknown, unknown]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we can define subtraction between &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; via a type constructor
that queries the typechecker for the elements missing between the elements of
&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; (let’s call this &lt;code class=&quot;highlighter-rouge&quot;&gt;Diff&lt;/code&gt;), and returns the length of &lt;code class=&quot;highlighter-rouge&quot;&gt;Diff&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NumToTup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TupToNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clearly, this only works with natural numbers and when &lt;code class=&quot;highlighter-rouge&quot;&gt;A &amp;gt;= B&lt;/code&gt;, but that is
good enough for our purposes of building greater than/less than comparators.
Let’s do that now, in both cases performing the comparison between two numbers
by “walking them down” until one hits 0.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;FAIL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GTTest1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GTTest2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GTTest3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LTTest1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LTTest2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LTTest3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoolTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'OK'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, now we’re ready to apply all this to the problem. First, let’s define type
constructors that take a record type of facts we know about a Sue, a field to
verify is greater than/less than that of the corresponding field in &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, and
yield an updated record type with a boolean flag indicating the result of the
verification on the checked field name.
If the field we wish to verify against &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;
isn’t present on the Sue record type we pass, we can just return the record type
as it is, since that field can’t be matched against &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; for this Sue anyway.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use &lt;code class=&quot;highlighter-rouge&quot;&gt;[f in F]&lt;/code&gt; to extract the properties we want to compare against &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;.
Since &lt;code class=&quot;highlighter-rouge&quot;&gt;F &amp;lt;: keyof TheSue&lt;/code&gt;, in theory we could pass in a union type as &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; and
get multiple fields to match against (e.g. if &lt;code class=&quot;highlighter-rouge&quot;&gt;F = 'a'|'b'&lt;/code&gt;, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;T extends
{1?: number, 2?: number}&lt;/code&gt;), but in practice we will use single-union types here
(like just one string variant). We cannot say &lt;code class=&quot;highlighter-rouge&quot;&gt;{F?: number}&lt;/code&gt; directly, as then
the field we are trying to match would be named &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; rather than the instantiated
type of &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Omit&amp;lt;T, U&amp;gt;&lt;/code&gt; is a type constructor that removes from the record type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; those
fields that are a subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt;. Formally,&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exclude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exclude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Omit&lt;/code&gt; provided by the TypeScript standard library has a differently-written
definition, but the behavior is the same.&lt;/p&gt;

&lt;p&gt;We perform &lt;code class=&quot;highlighter-rouge&quot;&gt;{[f in F]: LessThan&amp;lt;T[F], TheSue[F]&amp;gt;}&amp;amp;Omit&amp;lt;T, F&amp;gt;&lt;/code&gt; (and similarly
for &lt;code class=&quot;highlighter-rouge&quot;&gt;GreaterThan&lt;/code&gt;) because once we have determined whether the checked field is
indeed &lt;code class=&quot;highlighter-rouge&quot;&gt;LessThan&lt;/code&gt; that of &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt;, we would like to return a fresh type with
that data and all other data we already know about this Sue, sans the exact
numeric type we knew about the field we just checked. In constructing
&lt;code class=&quot;highlighter-rouge&quot;&gt;CheckLessThan&amp;lt;'cats', {trees: 2, cats: 5}&amp;gt;&lt;/code&gt;, if the less than check yields
&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, the constructor yields &lt;code class=&quot;highlighter-rouge&quot;&gt;{cats: false}&amp;amp;{trees: 2}&lt;/code&gt; (a type equivalent to
&lt;code class=&quot;highlighter-rouge&quot;&gt;{cats: false, trees: 2}&lt;/code&gt;). Keeping the checked field’s numeric type
would yield &lt;code class=&quot;highlighter-rouge&quot;&gt;{cats: false}&amp;amp;{trees: 2, cats: 5} = never&lt;/code&gt;, as there is no value
that can have a field &lt;code class=&quot;highlighter-rouge&quot;&gt;cats&lt;/code&gt; whose value inhabits both &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we define type constructors to take a record type of some Sue facts,
compare its fields against those of &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; for which we need to know
greater than/less than relations, and yield a record type with that data.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SueCheckFieldsGreater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SueCheckFieldsLesser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CheckLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pomeranians&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SueCheckFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;SueCheckFieldsLesser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SueCheckFieldsGreater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt; type is inhabited by all values, but is more flexible than the
&lt;code class=&quot;highlighter-rouge&quot;&gt;unknown&lt;/code&gt; type in that values of &lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt; also inhabit every &lt;em&gt;other&lt;/em&gt; type&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;whyany&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;whyany&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt; is an “escape hatch” from the type system, usually used
to deal with the fact that variables are untyped in JavaScript. Here, our
purpose is a little more sinister.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I leave as an exercise to the reader why the &lt;code class=&quot;highlighter-rouge&quot;&gt;PartialUnconstrained&lt;/code&gt; bound is
needed for the above type constructors, and why &lt;code class=&quot;highlighter-rouge&quot;&gt;SueCheckFieldsGreater&lt;/code&gt; cannot
be defined as&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SueCheckFieldsGreater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PartialUnconstrained&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CheckGreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and what extra work would need to be done in order to define it in this way.&lt;/p&gt;

&lt;p&gt;Next, we need to rewrite &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; in a manner that it can be matched against the
greater than/less than field constraints we recorded on each Sue record type via
the &lt;code class=&quot;highlighter-rouge&quot;&gt;SueCheckFields&lt;/code&gt; constructor. Since for the Sue that we want to find those
greater than/less than field constraints should all be typed as &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, let’s
redefine &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSue&lt;/code&gt; that way:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckedFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;trees&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pomeranians&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TheSueChecked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckedFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckedFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we perform the checking on each Sue, extract a union of them all, and
yield a subtype comparison against &lt;code class=&quot;highlighter-rouge&quot;&gt;TheSueChecked&lt;/code&gt; as in Part 1.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesCheckedWithNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SueCheckFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesCheckedWithNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuesCheckedWithNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MatchingSue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Extract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AllTheSues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TheSueChecked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All done, and in exactly 0 lines of runtime code!&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#epilogue&quot;&gt;#&lt;/a&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;I hope this cc provided you with a demonstration of the power of TypeScript’s
type system, and maybe gave you some ideas of how to exploit it in your own
work.&lt;/p&gt;

&lt;p&gt;I am not aware of other type systems in popular programming languages similar to
those of TypeScript’s in terms of reflection and the typing of primitive
literals. Our treatment of tuples above was nice for encoding naturals, and can
also give way to a weak kind of dependent typing:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prev&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InitArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, &quot;b&quot;, 3] &amp;amp; {length: 3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that this is not strictly type safe due to the &lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt; cast and requires a
formal type annotation, but the idea is intriguing. It is unlikely, however,
that this kind of use case will ever make it as a first-class citizen in the
type system.&lt;/p&gt;

&lt;p&gt;The behavior of distributive conditional types may appear to be a little bit
odd, as raw union types certainly don’t distribute over type
operations&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;obj&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;obj&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Values inhabited by &lt;code class=&quot;highlighter-rouge&quot;&gt;Obj&lt;/code&gt; include &lt;code class=&quot;highlighter-rouge&quot;&gt;{b: 2}&lt;/code&gt;, so &lt;code class=&quot;highlighter-rouge&quot;&gt;Obj&lt;/code&gt;
cannot have a property &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;. In fact, values of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Obj&lt;/code&gt; have no typed
properties until narrowed to know they have a field &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/span&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsFromRaw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error: Property 'a' does not exist on type 'Obj'.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PickA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsFromPick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PickA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1|3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are ways to get around this distributive behavior in conditional types,
but they are outside the scope of this cc. Just know they are out there, and
check them out if you’re interested :slightly_smiling_face:.&lt;/p&gt;

&lt;p&gt;And don’t worry – as all good things do, the TypeScript type system has holes. See
&lt;a href=&quot;https://github.com/ayazhafiz/rats&quot;&gt;raTS!&lt;/a&gt; for some; see the &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues&quot;&gt;TypeScript issue
tracker&lt;/a&gt; for many more.&lt;/p&gt;

&lt;p&gt;Anyway, I hope you enjoyed this. Please email me if you have any comments.&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">I’ve been doing the 2015 Advent of Code puzzles, and today I came across Day 16 - Aunt Sue. The premise of the problem is you have a bunch of aunts named Sue, each of which you know some facts about, and you are searching for the aunt that matches a set of predetermined facts. The second part of the problem adds additional constraints that make the fact matching conditional rather than singleton.</summary></entry><entry><title type="html">impact vs innovation &amp;amp; industry vs academia</title><link href="https://ayazhafiz.com/articles/20/impact-vs-innovation" rel="alternate" type="text/html" title="impact vs innovation &amp; industry vs academia" /><published>2020-12-01T02:00:00-06:00</published><updated>2020-12-01T02:00:00-06:00</updated><id>https://ayazhafiz.com/articles/20/impact-vs-innovation</id><content type="html" xml:base="https://ayazhafiz.com/articles/20/impact-vs-innovation">&lt;p&gt;I was recently reading Evan Martin’s blog post on his &lt;a href=&quot;http://neugierig.org/software/blog/2020/05/ninja.html&quot;&gt;takeaways from developing
the ninja build system&lt;/a&gt;,
and one thing Evan mentions is his frustration at engineers that don’t look at
related work when designing systems. This reminded me of Rado Kirov’s posts on
&lt;a href=&quot;https://rkirov.github.io/posts/incremental_computation_3/&quot;&gt;incremental computation&lt;/a&gt;,
where Rado argues that a lot of work in the space of incremental software is
underdeveloped because of the lack of cooperation between academic and industry
actors. Which isn’t a novel realization in general, but recently was a novel
realization to me, and has me thinking about something more general. So first a
motivating comment on that, and then we’ll specialize back to the “divide” between
academic and industry work.&lt;/p&gt;

&lt;p&gt;A large thing I have been struggling with in my (so far incredibly short) career is
a frequent incongruency between what I believe is impactful and what I believe
is innovative work in an opportunity. Though “impactful” and “innovative”
are broad and personal terms, in general I mean “impactful” work to be that
which improves the quality of products broader than the work itself&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;impactful&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;impactful&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;For example, reducing store waiting lines by 20% is impactful to
a business and its consumers&lt;/span&gt;, and “innovative” work to be that which is
novel in its domain&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;innovative&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;innovative&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;For example, the derivation of a
theorem.&lt;/span&gt;. Now, I certainly don’t mean to claim there is no overlap in
impactful and innovative opportunities, or even that some overlap is uncommon,
but I do argue that opportunities with a large degree of impact and innovation
in the steady state&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;steady&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;steady&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;because certainly, anything can one day
be made into an innovation or induce a great impact!&lt;/span&gt; are not all that
common.&lt;/p&gt;

&lt;p&gt;Now back to the note we started this discussion with – I think the clearest
place where this divide comes up is in this distinction between industry work
(impact by way of application) and academic work (innovation by way of theory).&lt;/p&gt;

&lt;p&gt;Even though theory and application are complementary - theory inspires
application, inspires new theory, etc. - I believe that popular culture has
separated these two ideas by a thin bridge. This is evident even in the divide
we understand between theory and application!&lt;/p&gt;

&lt;p&gt;Of course, this divide is very purposeful. You can’t do everything at once, and
we know that the $\text{scientist}\leftrightarrow\text{engineer}$ model works well;
it’s been alive for a very long time. The problem comes when people working on
applications lack knowledge of theory (and do not seek to learn it!), or vice
versa. Then, what
is novel to an individual is not necessarily novel in general, and time is wasted approaching
a problem from an industrial direction when theory has been developed for a
version of the problem. Or vice versa.&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;related&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;related&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;A related problem
is effective knowledge sharing between domains and how to fill “valleys” in the N-dimensional landscape of
popular knowledge.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Here’s an example: my experience contributing to teams working on industrial
programming languages, I have noticed that relatively few people working in this
space in have background knowledge in programming language theory (even
self-taught!). Generally this is not an issue, but sometimes a problem comes up
that the team has not experienced before, and spends a lot of time “figuring
out”, but the problem in general is well-known and solved.&lt;/p&gt;

&lt;p&gt;This is a hard problem – the biggest
challenge is that you don’t know what you don’t know, and the first step is even
learning enough to realize what you don’t know. A final example: recently I got
into abstract rewriting systems, but for a while I didn’t even realize the
problems I was trying to solve were well-known in the theory of rewrite systems
until about a month in! Obviously, after that, things got a lot easier.&lt;/p&gt;

&lt;p&gt;All right, so maybe now you’re saying, “this is an ok observation, but so what?
What can we do about it?” Well, I suggest the following personal steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inspire the relationship between formal methods and their applications during
education - concentrations like “Applied Mathematics” deserve a fair share of
theory, and “Theoretical Algorithms” deserve a fair share of applications, at
least enough so that individuals new to a field have enough of an
understanding of the larger ecosystem to know what they don’t know, what is
useful, and what isn’t.&lt;/li&gt;
  &lt;li&gt;Seek out answers to ideas that are novel to you - while they may be novel to
you, they are likely not novel in general. Instead of reinventing the wheel,
first research to discover if the problem has already been solved. As
mentioned, figuring out how to discover whether the problem has been solved
may not be trivial, and so some prerequisite knowledge of the domain is
required (perhaps via (1)).&lt;/li&gt;
  &lt;li&gt;When developing novel solutions, start from formal models.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s either that, or get very knowledgeable about everything. I’m not certain
which is more realistic, but I have a suspicion. And as always, if you have thoughts,
I &lt;a href=&quot;mailto:ayaz.hafiz.1@gmail.com&quot;&gt;would love to hear from you&lt;/a&gt;!&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">I was recently reading Evan Martin’s blog post on his takeaways from developing the ninja build system, and one thing Evan mentions is his frustration at engineers that don’t look at related work when designing systems. This reminded me of Rado Kirov’s posts on incremental computation, where Rado argues that a lot of work in the space of incremental software is underdeveloped because of the lack of cooperation between academic and industry actors. Which isn’t a novel realization in general, but recently was a novel realization to me, and has me thinking about something more general. So first a motivating comment on that, and then we’ll specialize back to the “divide” between academic and industry work.</summary></entry><entry><title type="html">heterogeneity in volunteering</title><link href="https://ayazhafiz.com/articles/20/heterogeneity-in-volunteering" rel="alternate" type="text/html" title="heterogeneity in volunteering" /><published>2020-09-21T03:00:00-05:00</published><updated>2020-09-21T03:00:00-05:00</updated><id>https://ayazhafiz.com/articles/20/heterogeneity-in-volunteering</id><content type="html" xml:base="https://ayazhafiz.com/articles/20/heterogeneity-in-volunteering">&lt;blockquote&gt;
  &lt;p&gt;Note: This article is written with regard to ad-hoc volunteer programs, and
less so with regard to long-standing, consistent volunteering commitments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I went volunteering this past weekend for the first time since late March 2020
(around when the covid-19 pandemic began taking large swing in the U.S.).&lt;/p&gt;

&lt;p&gt;What are the characteristics of an individual who, during a pandemic, goes to
volunteer at a home for those experiencing homelessness? In my opinion, such an
individual is fairly invested in volunteering in this space. But what
surprised me about this session was the vast diversity of my fellow volunteers’
motivations for volunteering at the home.&lt;/p&gt;

&lt;p&gt;A senior couple told me they were excited to give someone a meal and help
contribute to the home’s rehabilitation program.
They wanted to see men experiencing homelessness get an education, find a job, and obtain
stable housing. The two, working with their local church, produce personal care
bags handed out to those they see living on the streets. Only once has a
recipient of a bag asked them for money instead&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;bag&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;bag&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This surprised me a lot. My
first impression was this would an example of giving presumed help, not the help
someone actually needs.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;A lawyer 25 years my senior said she was there to say hi to the men, many of
whom were now her close friends. As a side effect of her contribution for the
day, she would take home the egg shells and cardboard cartons for thirty dozen
eggs, which she gave to her composting and flower-growing neighbors
respectively. Why was she volunteering at this home? Well, it is quite
enjoyable and meaningful as a sense of community for her. In
fact, aside her apartment, this is the only indoor location she has been in since
the pandemic has taken large swing; she has not even ordered food in.&lt;/p&gt;

&lt;p&gt;As for me, I came because I wanted to speak to men experiencing homelessness
and learn how the pandemic has affected their livelihoods. It was my first time at
this home, and I wanted to learn about the experiences of the administrators of
the home, how the home operates, what the men in the home find challenging about
the home’s operations, and what unique initiatives the home drives.&lt;/p&gt;

&lt;p&gt;I list these motivations because they are very different, well-formed
perspectives.
Perhaps I had not noticed such diversities in reasoning in
previous volunteerings, perhaps I needed a several-month break, perhaps
this diversity is just characteristic to a group of individuals that would
volunteer in such a time, or perhaps something else.&lt;/p&gt;

&lt;p&gt;In previous volunteerings, I found that the motivations of my fellow volunteers were
often “non-interesting” – they were there to complete a requirement, try something new,
or just learn about a cause. For me, new insights and perspectives would come
from those impacted by the volunteering, and rarely from my peers.&lt;/p&gt;

&lt;p&gt;This time, I learned the most from my peers. This was such a great thing! I
felt surrounded by passionate, genuinely dedicated individuals in a way that I
had not before. It felt like a team in a way that I had not seen from ad-hoc
volunteer programs before.&lt;/p&gt;

&lt;p&gt;I am hungry to find more such programs. I write this as a retrospective,
inviting you to find such environments as well. And if you’re already a
part of one, I’d love to hear about your experience.&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">Note: This article is written with regard to ad-hoc volunteer programs, and less so with regard to long-standing, consistent volunteering commitments.</summary></entry><entry><title type="html">on understanding</title><link href="https://ayazhafiz.com/articles/20/on-understanding" rel="alternate" type="text/html" title="on understanding" /><published>2020-05-16T03:00:00-05:00</published><updated>2020-05-16T03:00:00-05:00</updated><id>https://ayazhafiz.com/articles/20/on-understanding</id><content type="html" xml:base="https://ayazhafiz.com/articles/20/on-understanding">&lt;p&gt;A juice diet is a fad. If it is to be ubiquitous, equity is not. Neither is the elimination of
racism, or the distribution of healthcare, or the raising of millions out of poverty, or the safety
or artificial intelligence, or the protection of endangered species, or any number of other things
you or I may wish to see succeed.&lt;/p&gt;

&lt;p&gt;Let’s call these &lt;strong&gt;hard problems&lt;/strong&gt;. These are problems large communities are passionate about, and
cannot be solved in five, twenty, or even fifty years.&lt;/p&gt;

&lt;p&gt;In most cases, the general population’s commitment to these problems seems to follow that of a
fad&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;feels-fad&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;feels-fad&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;I am not saying this distribution is anywhere near representative; it is simply how it feels to me.&lt;/span&gt;:&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/exp_of_exp.png&quot; /&gt;&lt;figcaption&gt;time vs perceived number of people committed to an issue&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;On the tail end, the number of people involved in resolving an issue converges to a value determined
by a function of how many communities want resolution of the issue, how many don’t, and how many are
indifferent. Note that only the first factor necessarily increases the convergent value.&lt;/p&gt;

&lt;p&gt;This convergence is expected – the world can’t dedicate all of its resources to one thing, and it’s
the whole reason for specialization. But if you are invested in an issue, and you want to see it
succeed, be committed to it. Not doing so is &lt;a href=&quot;#on-nomenclature&quot;&gt;dangerous&lt;/a&gt;; because these kinds of
issues take a very long time to solve, an initial high investment in a topic may cause workstreams
in that domain to continue expecting a similar investment. If the investment suddenly declines,
projects quickly fail.&lt;/p&gt;

&lt;h2 id=&quot;prelude&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#prelude&quot;&gt;#&lt;/a&gt;Prelude&lt;/h2&gt;

&lt;p&gt;My hope is this cc will encourage you to consider your world in a larger scope, ask more questions
about it, and recalculate your reality. It’s nice to sit around, sharing fundraisers and correcting
misinformation, believing there are a well-defined set of steps we all can take to solve a common
problem. But this is naive and unrealistic; if it were so easy, no problem would be hard.&lt;/p&gt;

&lt;p&gt;These ideas apply to many things, but the context of this cc is social problems. To that end, it
doesn’t matter how many anti-racism protests you attend or how much money you donate towards
eliminating homelessness if you can’t empathize with affected communities. Without empathy, you will
quickly reach a barrier in your understanding another’s needs&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;russia&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;russia&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This comes from my experience in
Russia – a white person who has only ever known other whites may not be a racist, but there is also
no way for them to stand up for a black person (or any minority) in an effective manner.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I hope the perspectives in this cc are of some use to you. At the same time, they are the thoughts
of a single individual and should be scrutinized.&lt;/p&gt;

&lt;h2 id=&quot;on-perspective&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-perspective&quot;&gt;#&lt;/a&gt;On perspective&lt;/h2&gt;

&lt;p&gt;It’s important for you and I to understand the roles we play in the problems we are invested in.
Failing to understand this unsyncs our expectations with others’, which derailing priorities and
causing internal conflicts. Understanding this is one part of &lt;a href=&quot;#on-the-big-picture&quot;&gt;the big picture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The experiences of one individual will never be exactly like that of another.
Commonalities can be found, but claiming lived experience of another’s life is absurd. This is why
empathy and &lt;a href=&quot;#on-research&quot;&gt;research&lt;/a&gt; become pivotal skills to master; you will never live
another’s experience, but you can learn to empathize and try to understand another’s perspective.&lt;/p&gt;

&lt;p&gt;We must learn others’ perspectives if we are committed to solving problems together. There is a
common mantra here that goes something like&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Give people the help that they need, not the help you think they need.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;because if we only give the help we think others need, at best we’ve fallen out of sync, and at
worst we’ve derailed the mission.&lt;/p&gt;

&lt;p&gt;There as a second, more subtle point to the above statement – hard problems are not about any one
individual, and there are very rarely single heroes in their solutions. A good solution requires
understanding the needs of hundreds of millions of people, which one individual can rarely do.&lt;/p&gt;

&lt;p&gt;Furthermore, though every individual has a contribution to make, the solutions to such problems are
moonshots. And because nothing is perfect, an actions of an individual to help one group may be
regressive to another group (see &lt;a href=&quot;#on-intersectionality&quot;&gt;intersectionality&lt;/a&gt; below).&lt;/p&gt;

&lt;h3 id=&quot;go&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#go&quot;&gt;#&lt;/a&gt;go!&lt;/h3&gt;

&lt;p&gt;Maybe this seems romantic. If that’s case, do &lt;a href=&quot;#on-research&quot;&gt;research&lt;/a&gt; and speak to people involved
in the things you care about. Keep sharing instagram stories and correcting ignorant statements, but
recognize that without deeply understanding an issue, one’s actions are limited and often naive.&lt;/p&gt;

&lt;h2 id=&quot;on-intersectionality&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-intersectionality&quot;&gt;#&lt;/a&gt;On intersectionality&lt;/h2&gt;

&lt;p&gt;Because no two individuals have the same lived experiences or perspectives, it’s impossible to
design an exhaustive solution to an issue&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;full-employment&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;full-employment&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;In mathematics, this is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Full_employment_theorem&quot;&gt;full employment theorem&lt;/a&gt;.&lt;/span&gt;. I’m not
saying we shouldn’t shoot for solutions that solve problems for everyone, but what I am saying is
that we can’t spend all our time just looking for the “perfect” one because then nothing ever gets
done, and no one is better off.&lt;/p&gt;

&lt;p&gt;So what is much more important is to shoot for milestones - maybe solutions that cover 90% of the
problem, then 95%, then 99%, then 99.9%, and so on. Milestones prove that things are getting done,
which is useful for morale and future investment.&lt;/p&gt;

&lt;p&gt;We also shouldn’t pretend that a 100% solution is ever readily available. It’s difficult to know the
needs of everyone because the most relevant solutions will always focus on the needs of the majority
of affected populations. No one can ever come out and say, “okay, I’ve solved X hard problem,” because
they’ve certainly failed to consider an intersectionality&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;intersectionality&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;intersectionality&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Intersectionality&quot;&gt;Intersectionality&lt;/a&gt; is the
idea that some issues faced by an individual are formed by a combination of identities rather than
a single one. For example, some issues faced a black woman are because they are black &lt;em&gt;and&lt;/em&gt; a woman,
rather than because they or black or a woman.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Because of intersectionalities, the 90% solution may be orthogonal to solutions for the other 10%.
As an example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consider ten people sleeping in a room. The room gets very hot, so one person turns on the cooler.
But one person in the room is sleeping below the AC vent, and wakes up sick the next day. Despite
the person being hot, simply turning on the AC did not fix all of their problems; the best solution
for them is to move away from the vent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s pivotal that milestones don’t regress on the status quo. Of course, this itself is a hard problem.&lt;/p&gt;

&lt;h2 id=&quot;on-the-big-picture&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-the-big-picture&quot;&gt;#&lt;/a&gt;On the big picture&lt;/h2&gt;

&lt;p&gt;It’s always important to step back and look at the big picture&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;big-picture&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;big-picture&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This is a vague term; for me the big picture is
every level above the one currently being looked from.&lt;/span&gt;. There are at least two reasons for this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It forces one to consider the goal in the context of an environment with more stakeholders. As an
example related to the previous section, maybe the problem can’t be wholly solved right now, but
getting a smaller win proves progress is being made, raising interest and laying the foundation
for future work.&lt;/li&gt;
  &lt;li&gt;Not everyone in the picture is aligned with your goals; maybe not even those you collaborate with.
Failing to recognize the motivations of others is dangerous because it pushes you further out of
understanding the context you are working in, and makes it more difficult to react to unexpected
events. Taking help and trusting others is pivotal to achieving your goals, but such trust can’t
be ignorant.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;on-research&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-research&quot;&gt;#&lt;/a&gt;On research&lt;/h2&gt;

&lt;p&gt;Today, most answers to questions are designed to get the reader to take a specific perspective (this
post is no different). So how do you find a definitive answer to something? In some sense, you
can’t – at most, you can take samples of a number of different answers and aggregate them into
your own understanding.&lt;/p&gt;

&lt;p&gt;Trust is difficult. Bill Gates found it difficult, so he started his own foundation instead of
donating all his money to existing funds. So before you convince yourself you understand something,
make sure you do research and are confident in your interpretation.&lt;/p&gt;

&lt;h2 id=&quot;on-nomenclature&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#on-nomenclature&quot;&gt;#&lt;/a&gt;On nomenclature&lt;/h2&gt;

&lt;p&gt;The canonical usage of “problematic” is dangerous. Without a description of why something is
“problematic”, saying something is “problematic” is equivalent to saying, “this statement says
something bad, but I’m not going to tell you what it is or why it’s bad”. In that context,
everything can be described as “problematic”, which is useless.&lt;/p&gt;

&lt;p&gt;To me, it is much more useful to describe an idea as dangerous, and explain why it is so.&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">A juice diet is a fad. If it is to be ubiquitous, equity is not. Neither is the elimination of racism, or the distribution of healthcare, or the raising of millions out of poverty, or the safety or artificial intelligence, or the protection of endangered species, or any number of other things you or I may wish to see succeed.</summary></entry><entry><title type="html">beauty</title><link href="https://ayazhafiz.com/articles/20/beauty" rel="alternate" type="text/html" title="beauty" /><published>2020-04-16T03:00:00-05:00</published><updated>2020-04-16T03:00:00-05:00</updated><id>https://ayazhafiz.com/articles/20/beauty</id><content type="html" xml:base="https://ayazhafiz.com/articles/20/beauty">&lt;p&gt;There’s this great quote from one of Zhu’s songs&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;cocaine-model&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cocaine-model&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://youtu.be/Skt_NKI4d6U?t=20&quot;&gt;Cocaine Model&lt;/a&gt;&lt;/span&gt; that has long influenced me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I was seven, my father said, “Fashion fades, but beauty is eternal. Elegance is illumination.
Blue is a language. Love and obsession is separated by a thin line, and that line is infatuation.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s broadly characterize human beauty as either normative or personal. Normative beauty attempts
to please the norm (of which there may be several), while personal beauty attempts to please the
self (of which there may be a few, but certainly not many). Normative beauty and personal beauty
don’t have to be disjoint, and both can be influenced environmentally. But personal beauty, when
realized, is always elegant to the self; unfortunately, the same cannot be said for normative
beauty&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;touch-beauty&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;touch-beauty&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;For example, consider the disparity between what is beautiful to
the eye and what is beautiful to the touch.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Understanding how an individual differentiates things like this has a tremendous influence on their
relationships. Whereas obsession decays into a desire to appease an individual’s perceived needs,
love is characterized by an understanding of their needs. These states are distinct, but may be
subtle; perhaps that subtly is infatuation.&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">There’s this great quote from one of Zhu’s songsCocaine Model that has long influenced me:</summary></entry><entry><title type="html">scaling up</title><link href="https://ayazhafiz.com/articles/20/scaling-up" rel="alternate" type="text/html" title="scaling up" /><published>2020-03-29T03:00:00-05:00</published><updated>2020-03-29T03:00:00-05:00</updated><id>https://ayazhafiz.com/articles/20/scaling-up</id><content type="html" xml:base="https://ayazhafiz.com/articles/20/scaling-up">&lt;p&gt;There’s this not-so-novel idea that a businesses will often find success by focusing on inputs
rather than outputs. The reasoning is that outputs are affected by many more externalities
that inputs, and that a strong application of a business’s inputs will naturally lead to
desired outputs. For example, a salesperson may wish to focus more on the number of meetings they
set up rather than their conversion rate&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;number-meetings&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;number-meetings&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The latter is less
deterministic than the former, and finding success in the former will lead to a larger number of
conversions anyway.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;But business must consider a number of other strategies, including how to scale up.
Observing the current&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;current&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;current&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;At the time of this writing&lt;/span&gt; COVID-19 pandemic, I
have become convinced that effective scaling is a pivotal consideration for all organizations, not
just businesses, and will play a tremendous role in the pandemic’s impact on human livelihoods. I’ll
give just three examples (you could find many more!):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Insurance premiums will soar after (and possibly during) this pandemic. Part of this will be
because a lot of people will get sick and insurance companies need to maintain short-term
profitability. Part of this is that insurance companies, like many nations’ healthcare systems,
are unprepared to scale for catastrophe.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As the pandemic begins to stabilize, many individuals will need convenient, flexible
sources of income. Businesses in the gig economy, like rideshare and delivery apps, will be
stressed to intake a tremendous userbase without meticulous foresight.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I planned to immigrate to Switzerland in May, prior to the nation’s suspension of work visas.
Due to an increased backlog and higher workload, Swiss consulates estimate the processing time of
a visa to increase to over a month&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;month&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;month&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;span&gt;​&lt;script type=&quot;math/tex&quot;&gt;\sim4\text{x}&lt;/script&gt;&lt;/span&gt; the regular
processing time&lt;/span&gt; after the suspension is lifted. Could this timeline
be improved with a buffer, like delaying the start date of an issued visa?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I anticipate that we will think about scale much more as COVID rages on, and that scaling solutions
will resurge as a &lt;a href=&quot;/articles/20/satellites#4--fact&quot;&gt;fact&lt;/a&gt; in a post-COVID world. Part of the
difficulty with scaling is that it is not cheap, and without an expectation for long-term need,
arguments for scalability are dulled. It will be interesting to see how these challenges are solved.
My bet is on an economy of platforms and services.&lt;/p&gt;

&lt;h2 id=&quot;bring-it-back&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#bring-it-back&quot;&gt;#&lt;/a&gt;bring it back&lt;/h2&gt;

&lt;p&gt;Generalizing&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;generalization&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;generalization&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Pun intended :slightly_smiling_face:&lt;/span&gt; the idea of
“scaling up”, one can thinking about going from a specialization to a generalization. Scale in this
sense can be very individual – it’s one thing to understand how much salt a scrambled egg requires,
it’s another to understand the same for an arbitrary dish.&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">There’s this not-so-novel idea that a businesses will often find success by focusing on inputs rather than outputs. The reasoning is that outputs are affected by many more externalities that inputs, and that a strong application of a business’s inputs will naturally lead to desired outputs. For example, a salesperson may wish to focus more on the number of meetings they set up rather than their conversion rateThe latter is less deterministic than the former, and finding success in the former will lead to a larger number of conversions anyway..</summary></entry><entry><title type="html">satellites</title><link href="https://ayazhafiz.com/articles/20/satellites" rel="alternate" type="text/html" title="satellites" /><published>2020-02-29T02:00:00-06:00</published><updated>2020-02-29T02:00:00-06:00</updated><id>https://ayazhafiz.com/articles/20/satellites</id><content type="html" xml:base="https://ayazhafiz.com/articles/20/satellites">&lt;p&gt;At some point, all fads were satellite ideas pursued by one more independent groups. As a fad grows,
so does the size and number of groups associated with it. Eventually a fad achieves a non-trivial
adoption rate (becomes a fact) or fades away (becomes an artifact).&lt;/p&gt;

&lt;p&gt;The relationships of groups pursuing an idea at all of these stages is well studied, especially
&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S2212827114003709&quot;&gt;with&lt;/a&gt; &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0956522104000272&quot;&gt;respect&lt;/a&gt;
&lt;a href=&quot;https://academic.oup.com/isr/article-abstract/11/3/523/1796789?redirectedFrom=fulltext&quot;&gt;to&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Complexity_of_Cooperation&quot;&gt;collaboration and competition&lt;/a&gt;&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;four-links&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;four-links&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;These are four separate links :slightly_smiling_face:&lt;/span&gt;.
In this cc, I wish to briefly discuss the consequences of each of these stages on individual
productivity and efficiency. Let’s start from the back.&lt;/p&gt;

&lt;h2 id=&quot;4--fact&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#4--fact&quot;&gt;#&lt;/a&gt;&lt;span class=&quot;el&quot;&gt;4:&lt;/span&gt;  Fact&lt;/h2&gt;

&lt;p&gt;Intuition might suggest that productivity is lowered significant after a fad becomes a fact. But
while there may not be a lot of effort required in growing the fact to a greater level of adoption,
maintenance is non-trivial. For example, the upfront cost of building a new house is high, but this
cost is marginal relative to the maintenance costs required over the better part of the next
century&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;maintenance&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;maintenance&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Maintenance requires both individual contribution (time) and
transient contributions (e.g. via money paid for services) of productivity.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;An individual may expect a consistent maintenance cost associated with a fact. This cost is likely
to be small compared to an individual’s other responsibilities, and an increase in maintenance costs
incites an individual to develop optimizations&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;maintenance-cost&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;maintenance-cost&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;E.g. a system
that requires a lot of manual tuning is likely to be superseded.&lt;/span&gt; (read: new satellite ideas).
This can lead to a cycle of individual effort invested in an idea.&lt;/p&gt;

&lt;h2 id=&quot;3--artifact&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#3--artifact&quot;&gt;#&lt;/a&gt;&lt;span class=&quot;el&quot;&gt;3:&lt;/span&gt;  Artifact&lt;/h2&gt;

&lt;p&gt;When a fad becomes an artifact, an individual has two choices:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Invest more time in the artifact. This boosts individual productivity, but is
inefficient when the fad has been shown to be flawed. For example, &lt;a href=&quot;http://nlp.seas.harvard.edu/NamedTensor.html&quot;&gt;untyped tensors&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pivot to another idea. This may lead to a loss of productivity in the short term due to ramp-up
investment, but increases efficiency in the long term.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aside these considerations, the productivity invested in an artifact is very similar to that of a
fact.&lt;/p&gt;

&lt;h2 id=&quot;2--fad&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2--fad&quot;&gt;#&lt;/a&gt;&lt;span class=&quot;el&quot;&gt;2:&lt;/span&gt;  Fad&lt;/h2&gt;

&lt;p&gt;Okay, so here’s where it gets interesting. I’m not convinced that being involved with a fad is
productive.&lt;/p&gt;

&lt;p&gt;What’s the hot thing right now? Whatever it is, I’m sure there are a lot of people working on it.
Realistically, if any one individual working on that fad ceased their contribution immediately,
whatever they could have discovered would be independently discovered in the next &lt;a href=&quot;https://en.wikipedia.org/wiki/15_minutes_of_fame&quot;&gt;15 minutes of
fame&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong – 10% contributions add up. But for the individual, 10% isn’t always enough.
This seems like a degradation in individual efficiency.&lt;/p&gt;

&lt;h2 id=&quot;1--satellite&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1--satellite&quot;&gt;#&lt;/a&gt;&lt;span class=&quot;el&quot;&gt;1:&lt;/span&gt;  Satellite&lt;/h2&gt;

&lt;p&gt;Naturally, satellite ideas require a large efficiency investment. Whether this translates to
heightened productivity is largely dependent on personal motivation.&lt;/p&gt;

&lt;p&gt;Satellites are lonely. Work on divergent ideas must be self-motivated, as invested dependents
are often lacking. When a road map is unclear (as is often the case for satellite ideas), it can be
difficult to convince oneself to be going. So a satellite must be really into it.&lt;/p&gt;

&lt;p&gt;I feel that this facet is often overlooked. Revolutionary ideas are good ideas, and they are also
incredibly unique and obsessively pursued. In fact, uniqueness and investment are the primary
factors that can promote a satellite into a fad. The soundness of an idea becomes more important
only later on.&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">At some point, all fads were satellite ideas pursued by one more independent groups. As a fad grows, so does the size and number of groups associated with it. Eventually a fad achieves a non-trivial adoption rate (becomes a fact) or fades away (becomes an artifact).</summary></entry><entry><title type="html">apathy</title><link href="https://ayazhafiz.com/articles/20/apathy" rel="alternate" type="text/html" title="apathy" /><published>2020-02-03T02:00:00-06:00</published><updated>2020-02-03T02:00:00-06:00</updated><id>https://ayazhafiz.com/articles/20/apathy</id><content type="html" xml:base="https://ayazhafiz.com/articles/20/apathy">&lt;p&gt;Discussions of apathy generally refer to the normative kind. This kind of apathy is characterized by
an indifference to a context that one has the privilege to interface with. There are many
reasons one may be apathetic – common arguments propose convenience or
indifference&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;indifference&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;indifference&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Of course, indifference and apathy are synonymous.&lt;/span&gt;.
More difficult explanations extend medical conditions and social influences; apathy is a consequence
of a &lt;a href=&quot;https://neuro.psychiatryonline.org/doi/full/10.1176/jnp.17.1.7&quot;&gt;number of neurological diseases&lt;/a&gt;
and is propagated by communities that &lt;a href=&quot;https://www.ted.com/talks/dave_meslin_the_antidote_to_apathy&quot;&gt;romanticize born heroes&lt;/a&gt;&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;bornhhero&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;bornhhero&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;I find it hard to believe that apathetic populations are inherently impartial. I argue that societies with strict representations of success model a majority of individuals to be inconsequential. By design, this pressures a feeling of unimportance even for the self-motivated.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;There is a kind of apathy often overlooked. Let’s call it budgeted apathy. This kind of
apathy is characterized by an indifference to a context that is orthogonal or abstracted by
one’s priorities.&lt;/p&gt;

&lt;p&gt;Here’s one example – a low-income family living in an expensive city may not have the time to think
about the long-term health effects of the fast food they consume&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;example&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;example&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;This is not meant to be an anecdotal or accurate example. It’s just an example.&lt;/span&gt;.
There are at least two reasons why this might be the case: the family values fast food’s
accessibility more than it discounts adverse effects, or the family is ignorant of fast food’s
adverse health effects. I argue that there is a possible third reason: the family is indifferent to
the health effects of fast food. Note that this third reason is characterized neither by an
evaluation of priorities nor by ignorance, but by an orthogonality of primary and secondary needs.&lt;/p&gt;

&lt;p&gt;Budgeted apathy is subtle; by design, it is equivalent to an orchestration of an individual’s
demands. On the other hand, it’s really just a convolution of the idea that an individual
focuses on what immediately affects them.&lt;/p&gt;

&lt;h2 id=&quot;go&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#go&quot;&gt;#&lt;/a&gt;go!&lt;/h2&gt;

&lt;p&gt;Maybe this is a nice idea, but it’s missing some action. One we all can take is advocacy for and
appreciation of others’ contexts. This is a little more abstract than walking in another’s shoes; it
requires a trust in individuals’ motivation, no matter how disparate they are from our own. Albeit
romantic, this is a simple, extraordinarily compassionate perspective.&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">Discussions of apathy generally refer to the normative kind. This kind of apathy is characterized by an indifference to a context that one has the privilege to interface with. There are many reasons one may be apathetic – common arguments propose convenience or indifferenceOf course, indifference and apathy are synonymous.. More difficult explanations extend medical conditions and social influences; apathy is a consequence of a number of neurological diseases and is propagated by communities that romanticize born heroes⊕I find it hard to believe that apathetic populations are inherently impartial. I argue that societies with strict representations of success model a majority of individuals to be inconsequential. By design, this pressures a feeling of unimportance even for the self-motivated..</summary></entry><entry><title type="html">analog algorithms</title><link href="https://ayazhafiz.com/articles/19/analog-algorithms" rel="alternate" type="text/html" title="analog algorithms" /><published>2019-12-30T00:00:00-06:00</published><updated>2019-12-30T00:00:00-06:00</updated><id>https://ayazhafiz.com/articles/19/analog-algorithms</id><content type="html" xml:base="https://ayazhafiz.com/articles/19/analog-algorithms">&lt;p&gt;Most algorithms are designed for computation in a Turing machine. But Turing
machines don’t encompass the physics of the universe, and of course there are
algorithms designed to operate with other mechanics. Let’s call these other
algorithms Analog Algorithms. Here’s one that claims to sort a set of numbers in
linear time&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;Turing-linear&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;Turing-linear&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;If executed on a simulating Turing machine.&lt;/span&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;algorithm-spaghetti-sort&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#algorithm-spaghetti-sort&quot;&gt;#&lt;/a&gt;Algorithm &lt;a href=&quot;https://en.wikipedia.org/wiki/Spaghetti_sort&quot;&gt;Spaghetti Sort&lt;/a&gt;&lt;/h4&gt;

  &lt;p&gt;Given an unsorted set of $n$ rational numbers
$S = \{s_1, \ldots, s_n\}\quad s_i \in \mathbb{Q}$:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;Obtain a set of spaghetti rods
$R = \{r_1, \ldots, r_n\}\quad len(r_i) = s_i$. Form a fist around the
rods.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Repeat until there are no more rods in the fist:&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;Hit one end of the spaghetti rods perpendicularly against a table, such
that the rods are aligned on that end.&lt;/li&gt;
        &lt;li&gt;Lower a hand on the other side of the rods until it touches a spaghetti
rod $r_i$.&lt;/li&gt;
        &lt;li&gt;Remove the rod $r_i$ from the fist and place it at the end of the sorted
output set.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Parts of this sort may seem decidedly non-linear&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;not-Turing&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;not-Turing&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Or at least very expensive, since we’re not necessarily dealing with Turing machines.&lt;/span&gt;.
What is the time bound for lowering a hand? How do we decide where to lower the hand
from? If the hand placement is decided visually, what is the cost of synaptic transmission?
And what is the cost of sensory response from the other hand touching the longest
rod? How do we account for the size of a hand needed to hold a very large number
of rods?&lt;/p&gt;

&lt;p&gt;Still, the spaghetti sort seems reasonable, in at least the sense that this is
how I would sort a set of spaghetti rods. And in celebration of the New Year, I
propose another analog algorithm, this one solving the
NP-complete&lt;span class=&quot;note&quot;&gt;&lt;label for=&quot;def-NP-complete&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;/span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;def-NP-complete&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Problems in the class NP are those whose solutions can be verified in polynomial time by a non-deterministic Turing machine. &lt;a href=&quot;https://en.wikipedia.org/wiki/NP-completeness&quot;&gt;NP-completeness&lt;/a&gt; refers to the class of problems hardest in NP. Every problem in NP can be transformed to an equivalent NP-complete problem.&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Clique_problem&quot;&gt;clique problem&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;algorithm-new-years-cliquer&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#algorithm-new-years-cliquer&quot;&gt;#&lt;/a&gt;Algorithm New Year’s Cliquer&lt;/h4&gt;

  &lt;p&gt;Given an undirected graph $G$ with vertices $V = \{v_1, \ldots, v_n\}$ and
edges $E = \{v_i \leftrightarrow v_j, \ldots\}$:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;Gather a group of people $P = \{p_1, \ldots, p_n\}$ and for each edge
$v_i \leftrightarrow v_j = e \in E$, introduce $p_i$ and $p_j$. Ensure that
each introduction results in an equivalent-strength friendship.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Institute a universal aid policy that provides each person the opportunity
to visit their new friends for the New Year.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;On New Year’s Day, let each person $p_i$ mingle until they find a group of
individuals $R_i$ where each individual in $R_i$ knows every other
individual in $R_i$, and $R_i$ is the largest of all such groups. By nature
of the friendships, this is guaranteed to happen.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Count the size of each group $R_j$ formed. All cliques of size $n$ in $P$
for any $n \in \mathbb{N}$ are now known. Mapping the cliques in the graph
$G$ is trivial.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have we proved $P = NP$? Definitely not. Is a New Year universal aid policy a
great idea? Absolutely. Anyway, I wish you a fulfilling New Year!&lt;/p&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">Most algorithms are designed for computation in a Turing machine. But Turing machines don’t encompass the physics of the universe, and of course there are algorithms designed to operate with other mechanics. Let’s call these other algorithms Analog Algorithms. Here’s one that claims to sort a set of numbers in linear timeIf executed on a simulating Turing machine..</summary></entry><entry><title type="html">seeing the big picture</title><link href="https://ayazhafiz.com/articles/19/seeing-the-big-picture" rel="alternate" type="text/html" title="seeing the big picture" /><published>2019-12-16T00:00:00-06:00</published><updated>2019-12-16T00:00:00-06:00</updated><id>https://ayazhafiz.com/articles/19/seeing-the-big-picture</id><content type="html" xml:base="https://ayazhafiz.com/articles/19/seeing-the-big-picture">&lt;p&gt;I’m not a good chess player. Perhaps causally, I was never very interested in it
either.&lt;/p&gt;

&lt;p&gt;But recently, I saw something new – chess is macro game. It’s a game between
sides, not between pieces.&lt;/p&gt;

&lt;p&gt;I don’t know why it took me 16 years to see this. Okay, it was definitely
some combination of taking the game for granted and a lack of further interest.
Those aren’t bad things – I think you should spend the most time on the things
you care most about. But they have led to at least two very scary results:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When learning something new, it’s easy to step back and realize where
knowledge and integration gaps exist. I’ve known about chess my whole life,
and never stopped to back up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This new perspective has reinvigorated my interest in chess and made me a
much stronger player.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many analogies you can derive here. So I challenge you:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where else is the Big Picture being missed?&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;fullwidth resp-iframe-container&quot; style=&quot;margin-top:2em&quot;&gt;
  &lt;iframe class=&quot;resp-iframe&quot; src=&quot;https://lichess.org/tv/frame&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;</content><author><name>hafiz</name><email>ayaz.hafiz.1@gmail.com</email></author><summary type="html">I’m not a good chess player. Perhaps causally, I was never very interested in it either.</summary></entry></feed>